<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OsmSharp.Routing</name>
    </assembly>
    <members>
        <member name="T:OsmSharp.Routing.ArcAggregation.AggregatedHelper">
            <summary>
            Contains some helper functions for arc aggregation.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedHelper.IsLeft(OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Returns true if the given direction is left.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedHelper.IsRight(OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Returns true if the given direction is right.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedHelper.IsTurn(OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Returns true if the given direction is a turn.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.ArcAggregator">
            <summary>
            An arc aggregator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.ArcAggregation.ArcAggregator._interpreter">
            <summary>
            Holds the routing interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.ArcAggregator.#ctor(OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a new arc aggregator.
            </summary>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.ArcAggregator.Aggregate(OsmSharp.Routing.Route)">
            <summary>
            Aggregates a route by remove information useless to the generation of routing instructions.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.ArcAggregator.Process(OsmSharp.Routing.Route,OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint,OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint,OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint)">
            <summary>
            Processes a part of the route.
            </summary>
            <param name="route"></param>
            <param name="previous"></param>
            <param name="current"></param>
            <param name="next"></param>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.ArcAggregator.IsSignificant(OsmSharp.Routing.Vehicle,OsmSharp.Routing.ArcAggregation.Output.AggregatedArc,OsmSharp.Routing.ArcAggregation.Output.AggregatedArc)">
            <summary>
            Returns true if the point between the two arcs represents a significant step in the route.
            </summary>
            <param name="previous_arc"></param>
            <param name="next_arc"></param>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.ArcAggregator.CreateArcAndPoint(OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint,OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint,OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint)">
            <summary>
            Generates an arc and it's next point from the current aggregated point.
            </summary>
            <param name="previous"></param>
            <param name="current"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator">
            <summary>
            Enumerates all aggregated points.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator._entryIdx">
            <summary>
            Holds the entry index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator._route">
            <summary>
            Holds the route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.#ctor(OsmSharp.Routing.Route)">
            <summary>
            Creates a new agregrated point enumerator.
            </summary>
            <param name="route"></param>
        </member>
        <member name="F:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator._current">
            <summary>
            Holds the current point.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.Dispose">
            <summary>
            Disposes all resources associated with this enumerator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.MoveNext">
            <summary>
            Moves to the next point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.Reset">
            <summary>
            Resets this enumerator.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.Current">
            <summary>
            Returns the current point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.AggregatedPointEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current point.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint">
            <summary>
            Represents an aggregated point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint.EntryIndex">
            <summary>
            Gets or sets the entry index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.AggregatedRoutePoint.Entry">
            <summary>
            Gets or sets the route point entry.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.Output.Aggregated">
            <summary>
            An aggregated abstract.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.Output.Aggregated.GetNext">
            <summary>
            Returns the next.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc">
            <summary>
            Represents an arc in the aggregated route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.GetNext">
            <summary>
            Returns the next aggregated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.Next">
            <summary>
            The end point of this arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.Distance">
            <summary>
            The distance in meter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.Name">
            <summary>
            The default name.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.Names">
            <summary>
            The name in different languages.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedArc.Tags">
            <summary>
            The tags/properties.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint">
            <summary>
            Represents a point in an aggregated route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.GetNext">
            <summary>
            Returns the next aggregated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.Location">
            <summary>
            The physical location of this point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.Next">
            <summary>
            The arc following this point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.Angle">
            <summary>
            The angle between the end of the previous arc and the beginning of the next arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.EntryIdx">
            <summary>
            The entry index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.Points">
            <summary>
            The point of points at this location.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint.ArcsNotTaken">
            <summary>
            List of the arcs not taken and their angle with respect to the end of the previous arc.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.ArcAggregation.Output.PointPoi">
            <summary>
            Represents a point that is being routed to/from and it's properties.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.PointPoi.Angle">
            <summary>
            The angle between the direction of the latest arc and the direction of this poi.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.PointPoi.Location">
            <summary>
            The physical location of this point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.PointPoi.Name">
            <summary>
            The name of the point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.ArcAggregation.Output.PointPoi.Tags">
            <summary>
            The tags/properties.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHEdgeData">
            <summary>
            Represents the data on a CH edge.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.IDynamicGraphEdgeData">
            <summary>
            Abstracts edge information.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraphEdgeData.EqualsGeometrically(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the given edge equals this edge geometrically.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.IDynamicGraphEdgeData.Forward">
            <summary>
            Returns the forward flag relative to the tags.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.IDynamicGraphEdgeData.RepresentsNeighbourRelations">
            <summary>
            Returns true if this edge represents a neighbour relation.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.IDynamicGraphEdgeData.Coordinates">
            <summary>
            Returns intermidiate coordinates (if any).
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.IDynamicGraphEdgeData.Tags">
            <summary>
            Returns the tags identifier.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.#ctor(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a new CHEdge data class.
            </summary>
            <param name="weight"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.#ctor(System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new CHEdge data class.
            </summary>
            <param name="weight"></param>
            <param name="forward"></param>
            <param name="backward"></param>
            <param name="toHigher"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.#ctor(System.Single,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Creates a new CHEdge data class.
            </summary>
            <param name="weight"></param>
            <param name="forward"></param>
            <param name="backward"></param>
            <param name="toHigher"></param>
            <param name="contractedVertexId"></param>
            <param name="tags"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.SetDirection(System.Boolean,System.Boolean)">
            <summary>
            Sets the direction without lower/higher info.
            </summary>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.SetDirection(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the direction.
            </summary>
            <param name="forward"></param>
            <param name="backward"></param>
            <param name="toHigher"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.ConvertToInformative">
            <summary>
            Converts this given edge to a purely informative edge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Equals(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.EqualsGeometrically(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same geographical information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Direction">
            <summary>
            Direction flag to higher vertex: ( 0=bidirectional,  1=forward,  2=backward,  3=not forward and not backward).
                           to lower  vertex: ( 4=bidirectional,  5=forward,  6=backward,  7=not forward and not backward).
                           no low/high info: ( 8=bidirectional,  9=forward, 10=backward, 11=not forward and not backward).
                           only informative: (12=bidirectional, 13=forward, 14=backward, 15=not forward and not backward).
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Forward">
            <summary>
            Gets the forwardflag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Backward">
            <summary>
            Gets the backwardflag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.ToHigher">
            <summary>
            Gets the to higher flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.ToLower">
            <summary>
            Gets the to lower flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Weight">
            <summary>
            Weight.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.HasContractedVertex">
            <summary>
            Returns true if this edge is a shortcut.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.ContractedVertexId">
            <summary>
            The vertex contracted by this edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Tags">
            <summary>
            Returns the tags (0 means no tags). 
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.Coordinates">
            <summary>
            Returns intermediate coordinates (if any).
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.RepresentsNeighbourRelations">
            <summary>
            Returns true if this edge represents a neighbour-relation.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHEdgeData.IsInformative">
            <summary>
            Returns true if this edge is informative.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHEdgeDataComparer">
            <summary>
            Comparer for CH edges.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer`1">
            <summary>
            Abstract a comparer for edges.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer`1.Overlaps(`0,`0)">
            <summary>
            Returns true if the data in the edge2 is useless if the data in edge1 is present.
            </summary>
            <param name="edge1"></param>
            <param name="edge2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHEdgeDataComparer.Overlaps(OsmSharp.Routing.CH.PreProcessing.CHEdgeData,OsmSharp.Routing.CH.PreProcessing.CHEdgeData)">
            <summary>
            Return true if the existence of edge1 makes edge2 useless.
            </summary>
            <param name="edge1"></param>
            <param name="edge2"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHExtensions">
            <summary>
            Contains extensions related to the CHEdgeData.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.RemoveInformativeEdges(System.Collections.Generic.KeyValuePair{System.UInt32,OsmSharp.Routing.CH.PreProcessing.CHEdgeData}[])">
            <summary>
            Removes all informative edges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.KeepInformativeEdges(System.Collections.Generic.KeyValuePair{System.UInt32,OsmSharp.Routing.CH.PreProcessing.CHEdgeData}[])">
            <summary>
            Removes all uninformative edges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.KeepUncontracted(System.Collections.Generic.KeyValuePair{System.UInt32,OsmSharp.Routing.CH.PreProcessing.CHEdgeData}[])">
            <summary>
            Removes all contracted edges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.AddDownwardEdges(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Adds all downward edges.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.GetArcsHigher(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32)">
            <summary>
            Returns the arcs that point to higher vertices.
            </summary>
            <param name="graph"></param>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHExtensions.GetArcsLower(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32)">
            <summary>
            Returns the arcs that point to lower vertices.
            </summary>
            <param name="graph"></param>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.CH.Routing.CHQueue">
            <summary>
            A CH queue.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Routing.CHQueue._forward">
            <summary>
            The forward queue.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Routing.CHQueue._backward">
            <summary>
            The backward queue.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Routing.CHQueue._intersection">
            <summary>
            The backward-forward intersection.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Routing.CHQueue.#ctor">
            <summary>
            Creates a new CH queue.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Routing.CHQueue.AddForward(OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Adds a path segment to the forward queue.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Routing.CHQueue.AddBackward(OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Adds a path segment to the backward queue.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="P:OsmSharp.Routing.CH.Routing.CHQueue.Intersection">
            <summary>
            Returns the intersection.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Routing.CHQueue.Forward">
            <summary>
            Returns the forward queue.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Routing.CHQueue.Backward">
            <summary>
            Returns the backward queue.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.CHRouter">
            <summary>
            A router for CH.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.IBasicRouter`1">
            <summary>
            Abstract a router that works on a dynamic graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.Calculate(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates a shortest path between two given vertices.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateManyToMany(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes between all source and all target vertices.
            </summary>
            <param name="_data_graph"></param>
            <param name="_interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="maxSearch"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the weight of the shortest path between two given vertices.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateToClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates a shortest path between the source vertex and any of the targets and returns the shortest.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateOneToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes from a given source to all given targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateManyToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes from a given sources to all given targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CalculateRange(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all points that are at or close to the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.CheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns true if the search can move beyond the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches for the closest routable point.
            </summary>
            <param name="graph">The graph to search.</param>
            <param name="interpreter">The routing interpreter.</param>
            <param name="vehicle">The vehicle to search for.</param>
            <param name="coordinate">The coordinate to search around.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="matcher">The matcher to match to edges.</param>
            <param name="pointTags">The properties of the point to match.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouter`1.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches for the closest routable point.
            </summary>
            <param name="graph">The graph to search.</param>
            <param name="interpreter">The routing interpreter.</param>
            <param name="vehicle">The vehicle to search for.</param>
            <param name="coordinate">The coordinate to search around.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="matcher">The matcher to match to edges.</param>
            <param name="pointTags">The properties of the point to match.</param>
            <param name="verticesOnly">Only match vertices.</param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.IBasicRouter`1.IsCalculateRangeSupported">
            <summary>
            Returns true if range calculation is supported.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.#ctor">
            <summary>
            Creates a new CH router on the givend data.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.Calculate(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateManyToMany(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes between all sources and targets.
            </summary>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="maxSearch"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the weight of shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateToClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculate route to the closest.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateOneToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all weights from one source to multiple targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateManyToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all weights from multiple sources to multiple targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateRange(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Not supported
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns true if the search can move beyond the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchBackwardIntoBucket(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.Dictionary{System.Int64,System.Double}},OsmSharp.Routing.Graph.Router.PathSegmentVisitList)">
            <summary>
            Searches backwards and puts the weigths from the to-vertex into the buckets list.
            </summary>
            <param name="graph"></param>
            <param name="buckets"></param>
            <param name="toVisitList"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchForwardFromBucket(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.Dictionary{System.Int64,System.Double}},OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Int64[])">
            <summary>
            Searches forward and uses the bucket to calculate smallest weights.
            </summary>
            <param name="graph"></param>
            <param name="buckets"></param>
            <param name="fromVisitList"></param>
            <param name="tos"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.DoCalculate(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Int32,System.Int64)">
            <summary>
            Calculates a shortest path between the two given vertices.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <param name="max_settles"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.DoCalculateManyToMany(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Int32)">
            <summary>
            Calculates all shortest paths between the given vertices.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <param name="maxSettles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Double)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="exception"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32)">
            <summary>
            Calculates the weight from from to to.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="exception"></param>
            <param name="max"></param>
            <param name="maxSettles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double)">
            <summary>
            Checks connectivity of a vertex.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Int32)">
            <summary>
            Checks connectivity of a vertex.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="maxSettles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateInternal(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Double,System.Int32)">
            <summary>
            Calculates a shortest path between the two given vertices.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="exception"></param>
            <param name="max"></param>
            <param name="maxSettles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.DoCheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Int32)">
            <summary>
            Checks if the given vertex is connected to others.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="max"></param>
            <param name="maxSettles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.CalculateBest(OsmSharp.Routing.CH.Routing.CHQueue)">
            <summary>
            Test stopping conditions and output the best tentative route.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchForward(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.Routing.CHQueue,OsmSharp.Collections.PriorityQueues.IPriorityQueue{OsmSharp.Routing.Graph.Router.PathSegment{System.Int64}},System.Int64)">
            <summary>
            Do one forward search step.
            </summary>
            <param name="graph"></param>
            <param name="settledQueue"></param>
            <param name="queue"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchBackward(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.Routing.CHQueue,OsmSharp.Collections.PriorityQueues.IPriorityQueue{OsmSharp.Routing.Graph.Router.PathSegment{System.Int64}},System.Int64)">
            <summary>
            Do one backward search step.
            </summary>
            <param name="graph"></param>
            <param name="settledQueue"></param>
            <param name="queue"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.ExpandBestResult(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.CHRouter.CHResult)">
            <summary>
            Expands a ch results into an expanded path segment.
            </summary>
            <param name="graph"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.ExpandPath(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Converts the CH paths to complete paths in the orginal network.
            </summary>
            <param name="graph"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.ConvertArc(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Converts the given edge and expands it if needed.
            </summary>
            <param name="graph"></param>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.NotifyPathSegment(OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Notifies the arc.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches the data for a point on an edge closest to the given coordinate.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="delta"></param>
            <param name="matcher"></param>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="pointTags"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches the data for a point on an edge closest to the given coordinate.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="delta"></param>
            <param name="matcher"></param>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="pointTags"></param>
            <param name="verticesOnly"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.CHRouter.DoSearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean)">
            <summary>
            Searches the data for a point on an edge closest to the given coordinate.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="delta"></param>
            <param name="matcher"></param>
            <param name="pointTags"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.CHRouter.IsCalculateRangeSupported">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.CH.CHRouter.NotifyPathSegmentEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.CHRouter.CHBest">
            <summary>
            Holds the result.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.CHRouter.CHBest.VertexId">
            <summary>
            The vertex in the 'middle' of the best route yet.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.CHRouter.CHBest.Weight">
            <summary>
            The weight of the best route yet.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.CHRouter.CHBest.Found">
            <summary>
            The result that was found.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.CHRouter.NotifyPathSegmentDelegate">
            <summary>
            The delegate for arc notifications.
            </summary>
            <param name="route"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor">
            <summary>
            Pre-processor to construct a Contraction Hierarchy (CH).
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.PreProcessor.IPreProcessor">
            <summary>
            Abstract representation of a pre-processor.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.PreProcessor.IPreProcessor.Start">
            <summary>
            Starts the pre-processing.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._target">
            <summary>
            Holds the data target.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._comparer">
            <summary>
            Holds the edge comparer.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._keepDirectNeighbours">
            <summary>
            Holds the keep direct neighbours flag.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.PreProcessing.INodeWeightCalculator,OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator,System.Boolean)">
            <summary>
            Creates a new pre-processor.
            </summary>
            <param name="target"></param>
            <param name="calculator"></param>
            <param name="witnessCalculator"></param>
            <param name="keepDirectNeighbours"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.PreProcessing.INodeWeightCalculator,OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new pre-processor.
            </summary>
            <param name="target"></param>
            <param name="calculator"></param>
            <param name="witnessCalculator"></param>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._calculator">
            <summary>
            Holds a weight calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._witnessCalculator">
            <summary>
            Holds a witness calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._contractionWitnessCalculator">
            <summary>
            Holds a witness calculator just for contraction.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.Start">
            <summary>
            Starts pre-processing all nodes
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.Contract(System.UInt32)">
            <summary>
            Contracts the given vertex.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._contracted">
            <summary>
            Keeps and array of the contraction status of vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.MarkContracted(System.UInt32)">
            <summary>
            Mark the vertex as contacted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.IsContracted(System.UInt32)">
            <summary>
            Returns true if the vertex is contracted.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._queue">
            <summary>
            Holds a queue of contraction priorities.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._k">
            <summary>
            The amount of queue 'misses' to recalculated.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._misses">
            <summary>
            Holds a counter of all misses.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor._misses_queue">
            <summary>
            Holds the misses queue.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.SelectNext">
            <summary>
            Select the next vertex from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.CanBeContracted(System.UInt32)">
            <summary>
            Returns true if the vertex can be contracted compared to it's neighbours.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.ReQueue(System.UInt32)">
            <summary>
            Re-calculates the priority and queues the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.CanBeContractedLocally(System.UInt32,System.Single)">
            <summary>
            Returns true if the given vertex's neighbours have a higher priority.
            </summary>
            <param name="vertex"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.CalculatePriority(System.UInt32)">
            <summary>
            Calculates the priority of the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NotifyArc(System.UInt32,System.UInt32)">
            <summary>
            Notifies a new arc.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NotifyRemove(System.UInt32,System.UInt32)">
            <summary>
            Notifies an arc removal.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.OnBeforeContraction(System.UInt32,System.Collections.Generic.KeyValuePair{System.UInt32,OsmSharp.Routing.CH.PreProcessing.CHEdgeData}[])">
            <summary>
            Notifies an arc removal.
            </summary>
            <param name="vertex"></param>
            <param name="edges"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.OnAfterContraction(System.UInt32,System.Collections.Generic.KeyValuePair{System.UInt32,OsmSharp.Routing.CH.PreProcessing.CHEdgeData}[])">
            <summary>
            Notifies an arc removal.
            </summary>
            <param name="vertex"></param>
            <param name="edges"></param>
        </member>
        <member name="E:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NotifyArcEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NotifyRemoveEvent">
            <summary>
            The event.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.OnBeforeContractionEvent">
            <summary>
            The before contraction delegate.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.OnAfterContractionEvent">
            <summary>
            The after contraction delegate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NodeWeightCalculator">
            <summary>
            Returns the node weight calculator used by this pre-processor.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.NodeWitnessCalculator">
            <summary>
            Returns the node witness calculator used by this pre-processor.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.ArcDelegate">
            <summary>
            The delegate for arc notifications.
            </summary>
            <param name="from_id"></param>
            <param name="to_id"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHPreProcessor.VertexDelegate">
            <summary>
            The delegate for arc notifications.
            </summary>
            <param name="vertex"></param>
            <param name="edges"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue">
            <summary>
            CH priority queue.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue._weights">
            <summary>
            Holds the weights.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue._sorted_weights">
            <summary>
            Holds the sorted vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.#ctor">
            <summary>
            Creates a new queue.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Contains(System.UInt32)">
            <summary>
            Returns true if the given vertex is in this queue.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Enqueue(System.UInt32,System.Single)">
            <summary>
            Enqueues the given vertex with the given weight.
            </summary>
            <param name="id"></param>
            <param name="weight"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Pop">
            <summary>
            Pops and returns the vertex with the smallest weight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Remove(System.UInt32)">
            <summary>
            Removes the given vertex.
            </summary>
            <param name="vertex_id"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Peek">
            <summary>
            Peeks at the vertex with the lowest weight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.PeekAll">
            <summary>
            Peeks to all the vertices with the lowest weight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.PeekAtWeight(System.Single)">
            <summary>
            Peeks at the vertices with a given weight.
            </summary>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Weight(System.UInt32)">
            <summary>
            Returns the weight for the given vertex.
            </summary>
            <param name="current_id"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.GetEnumerator">
            <summary>
            Returns the enumerator for this queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for this queue.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Count">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.CHPriorityQueue.Weights">
            <summary>
            Enumerates all the weights.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.INodeWeightCalculator">
            <summary>
            A weight calculator for the node ordering.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.INodeWeightCalculator.Calculate(System.UInt32)">
            <summary>
            Calculates the weight of the given vertex u.
            </summary>
            <param name="vertex"></param>
            <returns>A estimate of the benefit of contraction, when float.MaxValue the vertex will not be contracted.</returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.INodeWeightCalculator.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator">
            <summary>
            A witness calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator.Exists(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Single,System.Int32)">
            <summary>
            Return true if a witness exists for the given graph vertex 
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="weight"></param>
            <param name="max_settles"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference._witness_calculator">
            <summary>
            Holds the witness calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference._data">
            <summary>
            Holds the data.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="data"></param>
            <param name="witness_calculator"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifference.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.#ctor(OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="witness_calculator"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContracted.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace">
            <summary>
            The edge difference calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._witness_calculator">
            <summary>
            Holds the graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._data">
            <summary>
            Holds the data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._contraction_count">
            <summary>
            Holds the contracted count.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace._depth">
            <summary>
            Holds the depth.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.CH.PreProcessing.INodeWitnessCalculator)">
            <summary>
            Creates a new edge difference calculator.
            </summary>
            <param name="data"></param>
            <param name="witness_calculator"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.Calculate(System.UInt32)">
            <summary>
            Calculates the edge-difference if u would be contracted.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.EdgeDifferenceContractedSearchSpace.NotifyContracted(System.UInt32)">
            <summary>
            Notifies this calculator that the vertex was contracted.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering">
            <summary>
            Orders the vertices putting the sparse vertices first, any other float.MaxValue.
            
            This should result in a sparser graph without nodes with exactly 2 neighbours.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering._data">
            <summary>
            Holds the data source.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.#ctor(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates a new sparse ordering calculator.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.Calculate(System.UInt32)">
            <summary>
            Calculates the ordering.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Ordering.LimitedLevelOrdering.SparseOrdering.NotifyContracted(System.UInt32)">
            <summary>
            Do nothing with this here!
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Witnesses.CHRouterWitnessCalculator">
            <summary>
            Does witness calculations using the CHRouter implementation.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Witnesses.CHRouterWitnessCalculator._router">
            <summary>
            Holds the data target.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.CHRouterWitnessCalculator.#ctor">
            <summary>
            Creates a new witness calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.CHRouterWitnessCalculator.Exists(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Single,System.Int32)">
            <summary>
            Returns true if the given vertex has a witness calculator.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="weight"></param>
            <param name="max_settles"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator">
            <summary>
            A simple dykstra witness calculator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator._hopLimit">
            <summary>
            Holds the current hop limit.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.#ctor">
            <summary>
            Creates a new witness calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.#ctor(System.Int32)">
            <summary>
            Creates a new witness calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.Exists(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Single,System.Int32)">
            <summary>
            Returns true if the given vertex has a witness calculator.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="weight"></param>
            <param name="max_settles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},System.UInt32,System.UInt32,System.UInt32,System.Single,System.Int32)">
            <summary>
            Implements a very simple dykstra version.
            </summary>
            <param name="graph"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="via"></param>
            <param name="max_weight"></param>
            <param name="max_settles"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.SettledVertex">
            <summary>
            Represents a settled vertex.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.SettledVertex.#ctor(System.UInt32,System.Single,System.UInt32)">
            <summary>
            Creates a new settled vertex.
            </summary>
            <param name="vertex"></param>
            <param name="weight"></param>
            <param name="hops"></param>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.SettledVertex.VertexId">
            <summary>
            The vertex that was settled.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.SettledVertex.Weight">
            <summary>
            The weight this vertex was settled at.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.PreProcessing.Witnesses.DykstraWitnessCalculator.SettledVertex.Hops">
            <summary>
            The hop-count of this vertex.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer">
            <summary>
            Serializes/deserialiers a routing data source with CH edges.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1">
            <summary>
            An abstract serializer to serialize/deserialize a routing data source to a flat-file.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1">
            <summary>
            Abstract representation of a routing serializer.
            </summary>
            <remarks>Versioning is implemented in the file format to guarantee backward compatibility.</remarks>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.BuildVersionHeader">
            <summary>
            Builds a uniform version header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.WriteVersionHeader(System.IO.Stream)">
            <summary>
            Writes the version header.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.ReadAndValidateHeader(System.IO.Stream)">
            <summary>
            Reads and validates the header.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.ReadMeta(System.IO.Stream)">
            <summary>
            Reads the meta-data from the stream starting at the given position.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.WriteMeta(System.IO.Stream,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Writes the meta-data to the stream starting at the given position.
            </summary>
            <param name="stream"></param>
            <param name="metaTags"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.BuildVehiclesRuntimeTypeModel">
            <summary>
            Builds vehicles runtime type model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.ReadVehicleProfiles(System.IO.Stream)">
            <summary>
            Reads the vehicle profiles from the stream starting at the given position.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.WriteVehicleProfiles(System.IO.Stream,System.Collections.Generic.IEnumerable{OsmSharp.Routing.Vehicle})">
            <summary>
            Writes the meta-data to the stream starting at the given position.
            </summary>
            <param name="stream"></param>
            <param name="vehicleProfiles"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.WriteVehicleProfiles(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the meta-data to the stream starting at the given position.
            </summary>
            <param name="stream"></param>
            <param name="vehicleProfiles"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.CanDeSerialize(System.IO.Stream)">
            <summary>
            Returns true if this serializer can deserialize the data in the given stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.Serialize(System.IO.Stream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0},OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Serializes the given graph and tags index to the given stream.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <param name="metaTags"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.DoSerialize(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Serializes the given graph and tags index to the given stream.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.Deserialize(System.IO.Stream,System.Boolean)">
            <summary>
            Deserializes the given stream into a routable graph.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.Deserialize(System.IO.Stream,OsmSharp.Collections.Tags.TagsCollectionBase@,System.Boolean)">
            <summary>
            Deserializes the given stream into a routable graph.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="metaTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.DoDeserialize(OsmSharp.IO.LimitedStream,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deserializes the given stream into a routable graph.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="metaTags"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.RoutingDataSourceSerializer`1.VersionString">
            <summary>
            Returns the version number.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.DoSerialize(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Does the v1 serialization.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.DoDeserialize(OsmSharp.IO.LimitedStream,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does the v1 deserialization.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="vehicles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.CreateGraph(OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Creates the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.CreateTagsCollectionIndex">
            <summary>
            Creates the tags collection index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializeVertices(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Serializes the vertices
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializeEdges(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Serializes the edges.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializeTags(OsmSharp.IO.LimitedStream,OsmSharp.Collections.Tags.Index.ITagsCollectionIndexReadonly)">
            <summary>
            Serializes the meta-data.
            </summary>
            <param name="stream"></param>
            <param name="tagsCollectionIndex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.DeserializeVertices(OsmSharp.IO.LimitedStream,System.Int64,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Deserializes the vertices
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <param name="size"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.DeserializeEdges(OsmSharp.IO.LimitedStream,System.Int64,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{`0})">
            <summary>
            Deserializes the edges.
            </summary>
            <param name="stream"></param>
            <param name="size"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.DeserializeTags(OsmSharp.IO.LimitedStream,System.Int64,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Deserializes the meta-data.
            </summary>
            <param name="stream"></param>
            <param name="tagsCollectionIndex"></param>
            <param name="size"></param>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableVertex">
            <summary>
            Serializable coordinate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableVertex.Latitude">
            <summary>
            Gets/sets the latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableVertex.Longitude">
            <summary>
            Gets/sets the longitude.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableTag">
            <summary>
            Serializable tag.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableTag.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableTag.CollectionId">
            <summary>
            Gets or sets the collection id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableTag.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Serialization.FlatfileSerializer`1.SerializableTag.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.CreateGraph(OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Creates the graph to serialize into.
            </summary>
            <param name="tagsCollectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializeEdges(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Serializes all edges.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.DeserializeEdges(OsmSharp.IO.LimitedStream,System.Int64,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Deserializes all edges.
            </summary>
            <param name="stream"></param>
            <param name="size"></param>
            <param name="graph"></param>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.VersionString">
            <summary>
            Returns the version string.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge">
            <summary>
            A serializable edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.FromId">
            <summary>
            Gets or sets the from id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.ToId">
            <summary>
            Gets or sets the to id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.ContractedVertexId">
            <summary>
            The vertex contracted by this edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.CHEdgeFlatfileSerializer.SerializableEdge.Tags">
            <summary>
            Returns the tags (0 means no tags). 
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator">
            <summary>
            Enumerates all vertices in a CH graph in a depth-first manner starting with the vertex at the highest level.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator._current">
            <summary>
            Holds the current position.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator._graph">
            <summary>
            Holds the graph to be enumerated.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator._index">
            <summary>
            Holds the index of visited vertices.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator._currentCount">
            <summary>
            Holds the current count of enumerated vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.#ctor(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates depth-first enumerator.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.MoveNext">
            <summary>
            Moves to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Reset">
            <summary>
            Resets this enumerator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.FindHighest">
            <summary>
            Returns the highest vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.MoveToNextIsland">
            <summary>
            Moves to the next island.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Dispose">
            <summary>
            Disposes of all resources associated with this enumerator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.GetEnumerator">
            <summary>
            Returns a depth-first enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a depth-first enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Position">
            <summary>
            Represents the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Position.Parent">
            <summary>
            Holds the parent-position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Position.Vertex">
            <summary>
            Holds the current vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Position.ArcIdx">
            <summary>
            Holds the current arc idx.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstEnumerator.Position.Depth">
            <summary>
            Holds the current depth.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstVertex">
            <summary>
            Represents a vertex and a depth in the global CH graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstVertex.ToString">
            <summary>
            Returns a description for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstVertex.VertexId">
            <summary>
            Holds the vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHDepthFirstVertex.Depth">
            <summary>
            The depth of the vertex.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHBlockIndex">
            <summary>
            Represents an index of all CH blocks.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHBlockIndex.LocationIndex">
            <summary>
            Holds all relative block locations in the file.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHBlock">
            <summary>
            Represents a block containing sorted nodes and their respective arcs.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHBlock.CalculateId(System.UInt32,System.UInt32)">
            <summary>
            Calculates the block id for the given vertex id using the block size.
            </summary>
            <param name="vertexId"></param>
            <param name="blockSize"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHBlock.Vertices">
            <summary>
            Holds lower/higher index of arcs.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHBlock.Arcs">
            <summary>
            Holds the array of arcs for all nodes in this block.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHVertex">
            <summary>
            Represents a CH vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertex.ArcIndex">
            <summary>
            The lower index of the arcs associated with this vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertex.ArcCount">
            <summary>
            The number of arcs associated with this vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertex.Latitude">
            <summary>
            Holds the vertex latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertex.Longitude">
            <summary>
            Holds the vertex longitude.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHArc">
            <summary>
            Represents CH arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHArc.TargetId">
            <summary>
            The id of the target-vertex when not in this block.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHArc.Weight">
            <summary>
            The weight of this arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHArc.ShortcutId">
            <summary>
            Holds the id of the external shortcut vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHArc.Direction">
            <summary>
            Holds the direction(s) of this arc (0=bidirectional, 1=forward, 2=backward)
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHArc.TagsId">
            <summary>
            Holds the tags id associated with this arc.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegionIndex">
            <summary>
            Represents an index of all CH regions.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegionIndex.RegionIds">
            <summary>
            Holds all region ids.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegionIndex.LocationIndex">
            <summary>
            Holds all relative region locations in the file.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegion">
            <summary>
            Represents a region containing a list of vertices.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegion.Vertices">
            <summary>
            The list of vertices in this region.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource">
            <summary>
            A basic router datasource.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1">
            <summary>
            Abstracts a data source of a router that is a dynamic graph with an extra lookup function.
            </summary>
            <typeparam name="TEdgeData"></typeparam>
        </member>
        <member name="T:OsmSharp.Routing.Graph.IDynamicGraphReadOnly`1">
            <summary>
            Abstracts an graph implementation. 
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraphReadOnly`1.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Gets an existing vertex.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraphReadOnly`1.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs for the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraphReadOnly`1.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has the neighbour as a neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.IDynamicGraphReadOnly`1.VertexCount">
            <summary>
            Returns the total number of vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.SupportsProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle profile is supported by the the data in this data source.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.AddSupportedProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.GetArcs(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Returns a list of edges inside or intersecting with the given bounding box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.AddRestriction(System.UInt32[])">
            <summary>
            Adds a restriction to this graph by prohibiting the given route.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.AddRestriction(OsmSharp.Routing.Vehicle,System.UInt32[])">
            <summary>
            Adds a restriction to this graph by prohibiting the given route for the given vehicle.
            </summary>
            <param name="vehicle"></param>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.TryGetRestrictionAsStart(OsmSharp.Routing.Vehicle,System.UInt32,System.Collections.Generic.List{System.UInt32[]}@)">
            <summary>
            Returns all restricted routes that start in the given vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex"></param>
            <param name="routes"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.TryGetRestrictionAsEnd(OsmSharp.Routing.Vehicle,System.UInt32,System.Collections.Generic.List{System.UInt32[]}@)">
            <summary>
            Returns true if there is a restriction that ends with the given vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex"></param>
            <param name="routes"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.IBasicRouterDataSource`1.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._tagsIndex">
            <summary>
            Holds the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._stream">
            <summary>
            Holds the stream.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._serializer">
            <summary>
            Holds the serializer.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._vehicles">
            <summary>
            Holds the supported vehicles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.#ctor(System.IO.Stream,OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer,System.Collections.Generic.IEnumerable{System.String},System.Int32,OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegionIndex,System.Int32,System.Int32,OsmSharp.Routing.CH.Serialization.Sorted.CHBlockIndex,System.UInt32,OsmSharp.Collections.Tags.Index.ITagsCollectionIndexReadonly)">
            <summary>
            Creates a new CH edge data source.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.SupportsProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.AddSupportedProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.GetArcs(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Returns all edges inside the given boundingbox.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Returns the location of the vertex with the given id.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.GetVertices">
            <summary>
            Returns all vertices in this router data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs for the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has the given neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._zoom">
            <summary>
            The region zoom size.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._regions">
            <summary>
            Holds the regions.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._regionStreamParts">
            <summary>
            Holds the region stream parts.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.InitializeRegions(System.Int32,OsmSharp.Routing.CH.Serialization.Sorted.CHVertexRegionIndex,System.Int32)">
            <summary>
            Initializes all region stuff.
            </summary>
            <param name="startOfRegions"></param>
            <param name="regionIndex"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.LoadVerticesIn(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Loads all vertices inside the given boundingbox.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.DeserializeRegion(System.UInt64)">
            <summary>
            Deserializes a region with the given id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._blockSize">
            <summary>
            Holds the blocksize.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._blocks">
            <summary>
            Holds the cached blocks.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._startOfBlocks">
            <summary>
            Holds the start-position of the blocks.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource._blocksIndex">
            <summary>
            Holds the blocks index.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.InitializeBlocks(System.Int32,OsmSharp.Routing.CH.Serialization.Sorted.CHBlockIndex,System.UInt32)">
            <summary>
            Initializes the blocks stuff.
            </summary>
            <param name="startOfBlocks"></param>
            <param name="blocksIndex"></param>
            <param name="blockSize"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.LoadVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Loads a vertex and returns true if found.
            </summary>
            <param name="vertexId"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.LoadArcs(System.UInt32)">
            <summary>
            Loads all arcs associated with the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.DeserializeBlock(System.UInt32)">
            <summary>
            Deserialize the block with the given id.
            </summary>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.InitializeTagsIndex(System.Int32)">
            <summary>
            Initialize the tags index.
            </summary>
            <param name="startOfTags"></param>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.VertexCount">
            <summary>
            Returns the vertex count.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.StreamPart">
            <summary>
            Represents a part of a stream.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.StreamPart.Offset">
            <summary>
            Gets/sets the offset.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSource.StreamPart.Length">
            <summary>
            Gets/sets the length.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer">
            <summary>
            A v2 routing serializer.
            </summary>
            <remarks>Versioning is implemented in the file format to guarantee backward compatibility.</remarks>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer._regionZoom">
            <summary>
            Holds the zoom-level of the regions.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer._heightBinSize">
            <summary>
            Holds the size of the height-bins to be sorted in.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer._blockVertexSize">
            <summary>
            Holds the maximum number of vertices in a block.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer._runtimeTypeModel">
            <summary>
            Holds the runtime type model.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.#ctor">
            <summary>
            Creates a new v2 serializer.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new v2 serializer.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.DoSerialize(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Does the v2 serialization.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.SortGraph(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Returns a topologically sorted version of the given graph.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.SearchVertex(System.UInt32,System.Collections.Generic.Dictionary{System.UInt32,System.UInt32},System.Collections.Generic.List{System.UInt32}[])">
            <summary>
            Searches for a vertex and returns it's new id.
            </summary>
            <param name="oldVertexId"></param>
            <param name="currentBin"></param>
            <param name="heightBins"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.DoDeserialize(OsmSharp.IO.LimitedStream,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does the v2 deserialization.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="vehicles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.DeserializeBlock(System.IO.Stream,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Deserializes the given block of data.
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="decompress"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.DeserializeRegion(System.IO.Stream,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Deserialize the given region of data.
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="decompress"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Sorted.CHEdgeDataDataSourceSerializer.VersionString">
            <summary>
            Returns the version string.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource">
            <summary>
            A basic router datasource.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._vertices">
            <summary>
            Holds all graph data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._coordinates">
            <summary>
            Holds the coordinates of the vertices.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._tagsIndex">
            <summary>
            Holds the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._vertexIndex">
            <summary>
            Holds the vertex index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._vehicles">
            <summary>
            Holds the supported vehicles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.#ctor(System.IO.Stream,System.Boolean,System.Collections.Generic.IEnumerable{System.String},OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas,System.Int32,OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer,System.Int32)">
            <summary>
            Creates a new router data source.
            </summary>
            <param name="stream"></param>
            <param name="compressed"></param>
            <param name="tileMetas"></param>
            <param name="zoom"></param>
            <param name="v1RoutingDataSourceSerializer"></param>
            <param name="initialCapacity"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.SupportsProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.AddSupportedProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.GetArcs(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Returns all edges inside the given boundingbox.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Returns the location of the vertex with the given id.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.GetVertices">
            <summary>
            Returns all vertices in this router data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs for the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has the given neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._stream">
            <summary>
            Holds the stream containing the graph data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._compressed">
            <summary>
            Holds flag indicating that the data in the stream is compressed.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._routingDataSourceSerializer">
            <summary>
            Holds the routing serializer.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._graphTileMetas">
            <summary>
            Holds the tile metas.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._loadedTiles">
            <summary>
            Holds the loaded tiles.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._tilesPerVertex">
            <summary>
            Holds the tile to get the current vertex.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource._zoom">
            <summary>
            The zoom level of the cached tiles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Resize(System.UInt32)">
            <summary>
            Resize if needed.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.LoadMissingTile(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Loads all missing tiles.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.LoadMissingTile(OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Loads the missing tile at the given coordinate.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.LoadMissingTile(OsmSharp.Osm.Tiles.Tile)">
            <summary>
            Loads the missing tiles.
            </summary>
            <param name="tile"></param>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.VertexCount">
            <summary>
            Returns the vertex count.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Vertex">
            <summary>
            Represents a simple vertex.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Vertex.Arcs">
            <summary>
            Holds an array of edges starting at this vertex.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Location">
            <summary>
            Represents the location.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Location.Latitude">
            <summary>
            Gets/sets the latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.Location.Longitude">
            <summary>
            Gets/sets the longitude.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.TileStreamPosition">
            <summary>
            A tile stream position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.TileStreamPosition.Offset">
            <summary>
            Gets/sets the offset.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSource.TileStreamPosition.Length">
            <summary>
            Gets/sets the length.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer">
            <summary>
            A v2 routing serializer.
            </summary>
            <remarks>Versioning is implemented in the file format to guarantee backward compatibility.</remarks>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.TileMetaSize">
            <summary>
            Holds the size of the tile meta.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.Zoom">
            <summary>
            Holds the zoom.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer._compress">
            <summary>
            Holds the compression flag.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer._runtimeTypeModel">
            <summary>
            Holds the runtime type model.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.#ctor(System.Boolean)">
            <summary>
            Creates a new v2 serializer.
            </summary>
            <param name="compress">Flag telling this serializer to compress it's data.</param>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.DoSerialize(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Does the v1 serialization.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.DoDeserialize(OsmSharp.IO.LimitedStream,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does the v1 deserialization.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="vehicles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.DeserializeTile(System.IO.Stream,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Deserialize the given tile data.
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="decompress"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.VersionString">
            <summary>
            Returns the version string.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.UnserializedTileData.Ids">
            <summary>
            Gets/sets the ids.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.UnserializedTileData.Latitude">
            <summary>
            Gets/sets the offset of the latitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.UnserializedTileData.Longitude">
            <summary>
            Gets/sets the offset of the longitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.UnserializedTileData.StringTable">
            <summary>
            Gets/sets the stringtable.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.UnserializedTileData.Arcs">
            <summary>
            Gets/sets the vertices.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas">
            <summary>
            Serializable object containing all metadata tiles.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas.TileX">
            <summary>
            The tile x-coordinates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas.TileY">
            <summary>
            The tile y-coordinates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas.Offset">
            <summary>
            The tile offsets.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTileMetas.Length">
            <summary>
            The tile lengths.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile">
            <summary>
            Serializable object containing all data in a dynamic graph in one tile.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile.Ids">
            <summary>
            Gets/sets the ids.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile.Latitude">
            <summary>
            Gets/sets the offset of the latitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile.Longitude">
            <summary>
            Gets/sets the offset of the longitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile.StringTable">
            <summary>
            Gets/sets the stringtable.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphTile.Arcs">
            <summary>
            Gets/sets the vertices.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs">
            <summary>
            Serializable object containt all data about one arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.DestinationId">
            <summary>
            Gets/sets the destination id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.TileX">
            <summary>
            Gets/sets the tile x-coordinate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.TileY">
            <summary>
            Gets/sets the tile y-coordinate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.Forward">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.Backward">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.Weight">
            <summary>
            Gets or sets the edge weights.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableGraphArcs.Tags">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableTags">
            <summary>
            Serializeable version of a series of tags.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableTags.Keys">
            <summary>
            Holds all the keys.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.CH.Serialization.Tiled.CHEdgeDataDataSourceSerializer.SerializableTags.Values">
            <summary>
            Holds all the values.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1">
            <summary>
            A router data source that uses a IDynamicGraph as it's main datasource.
            </summary>
            <typeparam name="TEdgeData"></typeparam>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource`1">
            <summary>
            Interface representing objects that are both and IBasicRouterDataSource and a IDynamicGraph.
            </summary>
            <typeparam name="TEdgeData"></typeparam>
        </member>
        <member name="T:OsmSharp.Routing.Graph.IDynamicGraph`1">
            <summary>
            Abstracts a graph implementation.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.AddVertex(System.Single,System.Single)">
            <summary>
            Adds a vertex.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.SetVertex(System.UInt32,System.Single,System.Single)">
            <summary>
            Sets the vertex.
            </summary>
            <param name="vertex"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.AddVertex(System.Single,System.Single,System.Byte)">
            <summary>
            Adds a vertex.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="neighboursEstimate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.AddArc(System.UInt32,System.UInt32,`0,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0})">
            <summary>
            Adds an arc with associated data.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="data"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.DeleteArc(System.UInt32)">
            <summary>
            Deletes all arcs starting at the given vertex.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.DeleteArc(System.UInt32,System.UInt32)">
            <summary>
            Delete all arcs arc between two vertices.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.IDynamicGraph`1.Trim(System.UInt32)">
            <summary>
            Trims the graph to store a max number of vertices.
            </summary>
            <param name="max"></param>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._graph">
            <summary>
            Holds the basic graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._vertexIndex">
            <summary>
            Holds the index of vertices per bounding box.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._tagsIndex">
            <summary>
            Holds the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._supportedVehicles">
            <summary>
            Holds the supported vehicle profiles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.#ctor(OsmSharp.Collections.Tags.Index.ITagsCollectionIndexReadonly)">
            <summary>
            Creates a new osm memory router data source.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.#ctor(OsmSharp.Collections.Tags.Index.ITagsCollectionIndexReadonly,System.Int32)">
            <summary>
            Creates a new osm memory router data source.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.#ctor(OsmSharp.Routing.Graph.IDynamicGraph{`0},OsmSharp.Collections.Tags.Index.ITagsCollectionIndexReadonly)">
            <summary>
            Creates a new osm memory router data source.
            </summary>
            <param name="graph"></param>
            <param name="tagsIndex"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.SupportsProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddSupportedProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Adds one more supported profile.
            </summary>
            <param name="vehicle"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.GetSupportedProfiles">
            <summary>
            Returns all supported profiles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.DropVertexIndex">
            <summary>
            Deactivates the vertex index.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.RebuildVertexIndex">
            <summary>
            Rebuilds the vertex index.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.GetArcs(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Returns all arcs inside the given bounding box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Returns true if a given vertex is in the graph.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs starting at a given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has neighbour as a neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddVertex(System.Single,System.Single,System.Byte)">
            <summary>
            Adds a new vertex to this graph.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="neighboursEstimate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddVertex(System.Single,System.Single)">
            <summary>
            Adds a new vertex.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.SetVertex(System.UInt32,System.Single,System.Single)">
            <summary>
            Sets a vertex.
            </summary>
            <param name="vertex"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddArc(System.UInt32,System.UInt32,`0,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0})">
            <summary>
            Adds a new arc.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="data"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.DeleteArc(System.UInt32)">
            <summary>
            Removes all arcs starting at vertex.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.DeleteArc(System.UInt32,System.UInt32)">
            <summary>
            Deletes an arc.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.Trim(System.UInt32)">
            <summary>
            Trims this graph.
            </summary>
            <param name="max"></param>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._restrictedRoutes">
            <summary>
            Holds the restricted routes that apply to all vehicles.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1._restricedRoutesPerVehicle">
            <summary>
            Holds the restricted routes that apply to one vehicle profile.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddRestriction(System.UInt32[])">
            <summary>
            Adds a restriction to this graph by prohibiting the given route.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.AddRestriction(OsmSharp.Routing.Vehicle,System.UInt32[])">
            <summary>
            Adds a restriction to this graph by prohibiting the given route for the given vehicle.
            </summary>
            <param name="vehicle"></param>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.TryGetRestrictionAsStart(OsmSharp.Routing.Vehicle,System.UInt32,System.Collections.Generic.List{System.UInt32[]}@)">
            <summary>
            Returns all restricted routes that start in the given vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex"></param>
            <param name="routes"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.TryGetRestrictionAsEnd(OsmSharp.Routing.Vehicle,System.UInt32,System.Collections.Generic.List{System.UInt32[]}@)">
            <summary>
            Returns true if there is a restriction that ends with the given vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex"></param>
            <param name="routes"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.DynamicGraphRouterDataSource`1.VertexCount">
            <summary>
            Returns the number of vertices in this graph.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.MemoryDynamicGraph`1">
            <summary>
            An implementation of an in-memory dynamic graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.MemoryDynamicGraph`1._nextId">
            <summary>
            Holds the next id.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.MemoryDynamicGraph`1._vertices">
            <summary>
            Holds all graph data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.MemoryDynamicGraph`1._coordinates">
            <summary>
            Holds the coordinates of the vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.#ctor">
            <summary>
            Creates a new in-memory graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.#ctor(System.Int32)">
            <summary>
            Creates a new in-memory graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.IncreaseSize">
            <summary>
            Increases the memory allocation for this dynamic graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.AddVertex(System.Single,System.Single,System.Byte)">
            <summary>
            Adds a new vertex to this graph.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="neighboursEstimate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.AddVertex(System.Single,System.Single)">
            <summary>
            Adds a new vertex.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.SetVertex(System.UInt32,System.Single,System.Single)">
            <summary>
            Sets a vertex.
            </summary>
            <param name="vertex"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Returns the information in the current vertex.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.GetVertices">
            <summary>
            Returns an enumerable of all vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.AddArc(System.UInt32,System.UInt32,`0,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0})">
            <summary>
            Adds and arc to an existing vertex.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="data"></param>
            <param name="comparer">Comparator to compare edges and replace obsolete ones.</param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.DeleteArc(System.UInt32)">
            <summary>
            Removes all arcs starting at vertex.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.DeleteArc(System.UInt32,System.UInt32)">
            <summary>
            Removes all arcs starting at from ending at to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs starting at the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has neighbour as a neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.Trim(System.UInt32)">
            <summary>
            Trims the size of this graph.
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:OsmSharp.Routing.Graph.MemoryDynamicGraph`1.VertexCount">
            <summary>
            Returns the number of vertices in this graph.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Restrictions.GraphRestriction">
            <summary>
            Represents a routing restriction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Restrictions.GraphRestriction.Vertices">
            <summary>
            The sequence of vertices that cannot be travelled in the given order.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingBase`1">
            <summary>
            Contains generic fuctions common to all dykstra routers.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingBase`1.#ctor">
            <summary>
            Creates a new basic dykstra router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingBase`1.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches the data for a point on an edge closest to the given coordinate.
            </summary>
            <param name="graph"></param>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="delta"></param>
            <param name="matcher"></param>
            <param name="pointTags"></param>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingBase`1.SearchClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Single,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Searches the data for a point on an edge closest to the given coordinate.
            </summary>
            <param name="graph"></param>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="delta"></param>
            <param name="matcher"></param>
            <param name="pointTags"></param>
            <param name="interpreter"></param>
            <param name="verticesOnly"></param>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive">
            <summary>
            A class containing a dykstra implementation suitable for a simple graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.#ctor">
            <summary>
            Creates a new dykstra routing object.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.Calculate(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="vehicle"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateManyToMany(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the shortest path from all sources to all targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="maxSearch"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates the shortest path from the given vertex to the given vertex given the weights in the graph.
            </summary>
            <param name="vehicle"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateToClosest(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates a shortest path between the source vertex and any of the targets and returns the shortest.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="from"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateOneToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes from a given source to all given targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateManyToManyWeight(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all routes from a given sources to all given targets.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateRange(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all points that are at or close to the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CalculateRange(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calculates all points that are at or close to the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.CheckConnectivity(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns true if the search can move beyond the given weight.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.DoCalculation(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Does forward dykstra calculation(s) with several options.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="weight"></param>
            <param name="stopAtFirst"></param>
            <param name="returnAtWeight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.DoCalculation(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegmentVisitList,OsmSharp.Routing.Graph.Router.PathSegmentVisitList[],System.Double,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Does dykstra calculation(s) with several options.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="sourceList"></param>
            <param name="targetList"></param>
            <param name="weight"></param>
            <param name="stopAtFirst"></param>
            <param name="returnAtWeight"></param>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.Dykstra.DykstraRoutingLive.IsCalculateRangeSupported">
            <summary>
            Returns true, range calculation is supported.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.SearchClosestResult`1">
            <summary>
            The result the search closest returns.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.#ctor(System.Double,System.UInt32)">
            <summary>
            The result is located exactly at one vertex.
            </summary>
            <param name="distance"></param>
            <param name="vertex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.#ctor(System.Double,System.UInt32,System.UInt32,System.Int32,`0)">
            <summary>
            The result is located between two other vertices but on an intermediate point.
            </summary>
            <param name="distance"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="position"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.#ctor(System.Double,System.UInt32,System.UInt32,System.Double,`0)">
            <summary>
            The result is located between two other vertices.
            </summary>
            <param name="distance"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="position"></param>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.Vertex1">
            <summary>
            The first vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.Vertex2">
            <summary>
            The second vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.IntermediateIndex">
            <summary>
            The intermediate point position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.Position">
            <summary>
            The position between vertex1 and vertex2 (0=vertex1, 1=vertex2).
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.Distance">
            <summary>
            The distance from the point being resolved.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.SearchClosestResult`1.Edge">
            <summary>
            The edge data.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.PathSegment`1">
            <summary>
            Linked list of routed vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.#ctor(`0)">
            <summary>
            Creates a vertex not linked to any others.
            </summary>
            <param name="vertexId"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.#ctor(`0,System.Double,OsmSharp.Routing.Graph.Router.PathSegment{`0})">
            <summary>
            Creates a new linked vertex.
            </summary>
            <param name="vertexId"></param>
            <param name="weight"></param>
            <param name="from"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.Reverse">
            <summary>
            Returns the reverse of this path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.First">
            <summary>
            Returns the first vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.Length">
            <summary>
            Returns the length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.ConcatenateAfter(OsmSharp.Routing.Graph.Router.PathSegment{`0},System.Func{`0,`0,System.Int32})">
            <summary>
            Concatenates this path after the given path.
            </summary>
            <param name="path"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.ConcatenateAfter(OsmSharp.Routing.Graph.Router.PathSegment{`0})">
            <summary>
            Concatenates this path after the given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.Clone">
            <summary>
            Returns an exact copy of this path segment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.ToString">
            <summary>
            Returns a description of this path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.ToArray">
            <summary>
            Returns all the vertices in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.ToArrayWithWeight">
            <summary>
            Returns all the vertices in an array along with their respective weight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.op_Equality(OsmSharp.Routing.Graph.Router.PathSegment{`0},OsmSharp.Routing.Graph.Router.PathSegment{`0})">
            <summary>
            Returns true if the path is the samen.
            </summary>
            <param name="segment1"></param>
            <param name="segment2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.op_Inequality(OsmSharp.Routing.Graph.Router.PathSegment{`0},OsmSharp.Routing.Graph.Router.PathSegment{`0})">
            <summary>
            Returns true if the path is the samen.
            </summary>
            <param name="segment1"></param>
            <param name="segment2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.Equals(OsmSharp.Routing.Graph.Router.PathSegment{`0})">
            <summary>
            Returns true if the given object equals this one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.Equals(System.Object)">
            <summary>
            Returns true if the given object equals this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegment`1.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegment`1.VertexId">
            <summary>
            The id of this vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegment`1.Weight">
            <summary>
            The weight from the source vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegment`1.From">
            <summary>
            The vertex that came before this one.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Graph.Router.PathSegmentVisitList">
            <summary>
            Internal data structure reprenting a visit list,
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.Router.PathSegmentVisitList._visit_list">
            <summary>
            Holds all visited nodes sorted by weight.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Graph.Router.PathSegmentVisitList._visited">
            <summary>
            Holds all visited vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.#ctor">
            <summary>
            Creates a new visit list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new visit list.
            </summary>
            <param name="neighbour1"></param>
            <param name="neighbour2"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.#ctor(OsmSharp.Routing.Graph.Router.PathSegmentVisitList)">
            <summary>
            Creates a new visit list by copying an existing visit list.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.UpdateVertex(OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Updates a vertex in this visit list.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.GetFirst">
            <summary>
            Returns the vertex with the lowest weight and removes it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.PeekFirst">
            <summary>
            Returns the vertex with the lowest weight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Contains(System.Int64)">
            <summary>
            Returns true if the vertex is in this visit list.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.GetPathTo(System.Int64)">
            <summary>
            Returns the path to the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Remove(System.Int64)">
            <summary>
            Removes the path to the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.GetVertices">
            <summary>
            Returns a collection of vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Clone">
            <summary>
            Creates a copy of this path segment visit list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Count">
            <summary>
            Returns the element count in this list.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Neighbour1">
            <summary>
            Gets/sets the Neighbour1.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Graph.Router.PathSegmentVisitList.Neighbour2">
            <summary>
            Gets/sets the Neighbour2.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.IEdgeMatcher">
            <summary>
            Interface used to match a coordinate to a configurable routable position.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.IEdgeMatcher.MatchWithEdge(OsmSharp.Routing.Vehicle,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is a suitable candidate as a target for a point to be resolved on.
            </summary>
            <param name="vehicle"></param>
            <param name="pointTags"></param>
            <param name="edgeTags"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.DefaultEdgeMatcher">
            <summary>
            A default implementation of the edge matcher.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.DefaultEdgeMatcher.MatchWithEdge(OsmSharp.Routing.Vehicle,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is a suitable candidate as a target for a point to be resolved on.
            </summary>
            <param name="vehicle"></param>
            <param name="pointTags"></param>
            <param name="edgeTags"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.LevenshteinEdgeMatcher">
            <summary>
            A Levenshtein matching implementation of the edge matcher.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.LevenshteinEdgeMatcher.MatchWithEdge(OsmSharp.Routing.Vehicle,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is a suitable candidate as a target for a point to be resolved on.
            </summary>
            <param name="vehicle"></param>
            <param name="pointTags"></param>
            <param name="edgeTags"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.Instruction">
            <summary>
            Represents an instruction.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.Instruction.#ctor(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Creates a new instruction with only a location.
            </summary>
            <param name="entryIdx"></param>
            <param name="location"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.Instruction.#ctor(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Creates a new instruction with a location and points of interest.
            </summary>
            <param name="entryIdx"></param>
            <param name="location"></param>
            <param name="pois"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.Instruction.ToString">
            <summary>
            Returns a string that represents the current coordinate.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.Instruction.Pois">
            <summary>
            The points of interest for this instruction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.Instruction.Location">
            <summary>
            The location of this instruction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.Instruction.EntryIdx">
            <summary>
            Gets or sets the entry idx.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.Instruction.Text">
            <summary>
            The instruction text.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.Instruction.Extras">
            <summary>
            Gets/sets some extras if needed.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.InstructionGenerator">
            <summary>
            Instruction generator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.InstructionGenerator.Generate(OsmSharp.Routing.Route,OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Generates instructions.
            </summary>
            <param name="route"></param>
            <param name="interpreter"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.InstructionGenerator.Generate(OsmSharp.Routing.Route,OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator)">
            <summary>
            Generates instructions.
            </summary>
            <param name="route"></param>
            <param name="interpreter"></param>
            <param name="languageGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.InstructionGenerator.Generate(OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint,OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Generates instructions.
            </summary>
            <param name="aggregatePoint"></param>
            <param name="interpreter"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.InstructionGenerator.Generate(OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint,OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator)">
            <summary>
            Generates instructions.
            </summary>
            <param name="point"></param>
            <param name="interpreter"></param>
            <param name="languageGenerator"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator">
            <summary>
            A simple instruction generator, translating instructions into the dutch language.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator">
            <summary>
            Language generator interface.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateDirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates a direct turn instruction.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="streetTo"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateIndirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an indirect turn instruction.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountTurn"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GeneratePoi(OsmSharp.Routing.Instructions.Instruction,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi},System.Nullable{OsmSharp.Math.Geo.Meta.RelativeDirectionEnum})">
            <summary>
            Generates a POI instruction.
            </summary>
            <param name="instruction"></param>
            <param name="list"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateDirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an indirect turn instruction.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="streetTo"></param>
            <param name="relativeDirectionEnum"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateIndirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates and indirect turn instruction.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountTurn"></param>
            <param name="street_count_before_turn"></param>
            <param name="streetTo"></param>
            <param name="relativeDirectionEnum"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateImmidiateTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection)">
            <summary>
            Generates an immidiate turn instruction.
            </summary>
            <param name="instruction"></param>
            <param name="firstStreetCountTo"></param>
            <param name="first_street_to"></param>
            <param name="firstDirection"></param>
            <param name="secondStreetTo"></param>
            <param name="secondDirection"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateRoundabout(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Generates a roundabout instruction.
            </summary>
            <param name="instruction"></param>
            <param name="count"></param>
            <param name="nextStreet"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator.GenerateSimpleTurn(OsmSharp.Routing.Instructions.Instruction,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Generates a simple turn instructions.
            </summary>
            <param name="direction_instruction"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateDirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for a direct turn.
            </summary>
            <param name="instruction"></param>
            <param name="street_count_before_turn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateIndirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for an indirect turn.
            </summary>
            <param name="instruction"></param>
            <param name="street_count_turn"></param>
            <param name="street_count_before_turn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GeneratePoi(OsmSharp.Routing.Instructions.Instruction,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi},System.Nullable{OsmSharp.Math.Geo.Meta.RelativeDirectionEnum})">
            <summary>
            Generates an instruction for a POI.
            </summary>
            <param name="instruction"></param>
            <param name="list"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateDirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for a turn followed by another turn.
            </summary>
            <param name="instruction"></param>
            <param name="street_count_before_turn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateIndirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for an indirect turn.
            </summary>
            <param name="instruction"></param>
            <param name="street_count_turn"></param>
            <param name="street_count_before_turn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateImmidiateTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection)">
            <summary>
            Generates an instruction for an immidiate turn.
            </summary>
            <param name="instruction"></param>
            <param name="first_street_count_to"></param>
            <param name="first_street_to"></param>
            <param name="first_direction"></param>
            <param name="second_street_to"></param>
            <param name="second_direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateRoundabout(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Generates an instruction for a roundabout.
            </summary>
            <param name="instruction"></param>
            <param name="count"></param>
            <param name="next_street"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleDutchLanguageGenerator.GenerateSimpleTurn(OsmSharp.Routing.Instructions.Instruction,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Generates an instruction for a simple turn.
            </summary>
            <param name="instruction"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator">
            <summary>
            A simple instruction generator, translating instructions into the english language.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateDirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for a direct turn.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="streetTo"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateIndirectTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for an indirect turn.
            </summary>
            <param name="instruction"></param>
            <param name="street_count_turn"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GeneratePoi(OsmSharp.Routing.Instructions.Instruction,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi},System.Nullable{OsmSharp.Math.Geo.Meta.RelativeDirectionEnum})">
            <summary>
            Generates an instruction for a POI.
            </summary>
            <param name="instruction"></param>
            <param name="list"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateDirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for a turn followed by another turn.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateIndirectFollowTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an instruction for an indirect turn.
            </summary>
            <param name="instruction"></param>
            <param name="streetCountTurn"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="street_to"></param>
            <param name="direction"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateImmidiateTurn(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection)">
            <summary>
            Generates an instruction for an immidiate turn.
            </summary>
            <param name="instruction"></param>
            <param name="firstStreetCountTo"></param>
            <param name="first_street_to"></param>
            <param name="first_direction"></param>
            <param name="second_street_to"></param>
            <param name="second_direction"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateRoundabout(OsmSharp.Routing.Instructions.Instruction,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Generates an instruction for a roundabout.
            </summary>
            <param name="instruction"></param>
            <param name="count"></param>
            <param name="next_street"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.Defaults.SimpleEnglishLanguageGenerator.GenerateSimpleTurn(OsmSharp.Routing.Instructions.Instruction,OsmSharp.Math.Geo.Meta.RelativeDirectionEnum)">
            <summary>
            Generates an instruction for a simple turn.
            </summary>
            <param name="instruction"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner">
            <summary>
            Scentence planner for routing instructions.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner._instructions">
            <summary>
            Holds the list of planned instructions.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner._generator">
            <summary>
            Holds the language-specific generator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.#ctor(OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator)">
            <summary>
            Creates a new scentence planner.
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.GenerateTurn(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox,OsmSharp.Math.Geo.Meta.RelativeDirection,System.Int32,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates a turn instruction.
            </summary>
            <param name="entryIdx"></param>
            <param name="box"></param>
            <param name="direction"></param>
            <param name="streetCountTurn"></param>
            <param name="streetCountBeforeTurn"></param>
            <param name="streetFrom"></param>
            <param name="streetTo"></param>
            <param name="list"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.GeneratePoi(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi},OsmSharp.Math.Geo.Meta.RelativeDirection)">
            <summary>
            Generates a poi instruction.
            </summary>
            <param name="entryIdx"></param>
            <param name="box"></param>
            <param name="list"></param>
            <param name="direction"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.GenerateImmidiateTurn(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.Meta.RelativeDirection,System.Int32,OsmSharp.Math.Geo.Meta.RelativeDirection,OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase,System.Collections.Generic.List{OsmSharp.Routing.ArcAggregation.Output.PointPoi})">
            <summary>
            Generates an immidiate turn instruction.
            </summary>
            <param name="entryIdx"></param>
            <param name="box"></param>
            <param name="before_name"></param>
            <param name="first_direction"></param>
            <param name="first_street_count_to"></param>
            <param name="second_direction"></param>
            <param name="first_street_to"></param>
            <param name="second_street_to"></param>
            <param name="list"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.GenerateRoundabout(System.Int32,OsmSharp.Math.Geo.GeoCoordinateBox,System.Int32,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Generates a roudabout instruction.
            </summary>
            <param name="entryIdx"></param>
            <param name="box"></param>
            <param name="count"></param>
            <param name="next_street"></param>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.LanguageGeneration.SentencePlanner.Instructions">
            <summary>
            Not sure this should be here?
            </summary>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.MicroPlanning.Machines.ImmidateTurnMachine">
            <summary>
            Machine to detect significant turns.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine._planner">
            <summary>
            The contains the microplanner to report back to.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine._priority">
            <summary>
            The priority.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.#ctor(OsmSharp.Math.StateMachines.FiniteStateMachineState{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner,System.Int32)">
            <summary>
            Creates a new event machine.
            </summary>
            <param name="initial"></param>
            <param name="planner"></param>
            <param name="priority"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.Succes">
            <summary>
            Called when this machine is succesfull.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.RaiseFinalStateEvent(System.Collections.Generic.IList{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage})">
            <summary>
            Called when a final state is reached.
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.RaiseResetEvent(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage,OsmSharp.Math.StateMachines.FiniteStateMachineState{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage})">
            <summary>
            Called when a reset event occured.
            </summary>
            <param name="even"></param>
            <param name="state"></param>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.Planner">
            <summary>
            Returns the microplanner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine.Priority">
            <summary>
            Returns the priority.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.ImmidateTurnMachine.Initialize">
            <summary>
            Initializes this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.ImmidateTurnMachine.TestVeryShortArc(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Returns true if the given test object is a very short arc!
            </summary>
            <param name="test"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.ImmidateTurnMachine.TestNonSignificantTurn(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.ImmidateTurnMachine.TestSignificantTurn(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiMachine.Initialize">
            <summary>
            Initializes this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiMachine.TestNonSignificantTurnNonPoi(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="test"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiMachine.TestPoi(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given point is a poi.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiWithTurnMachine.Initialize">
            <summary>
            Initializes this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiWithTurnMachine.TestNonSignificantTurnNonPoi(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="test"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.PoiWithTurnMachine.TestPoi(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given point is a poi.
            </summary>
            <param name="test"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine">
            <summary>
            Machine to detect roundabouts.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine.Initialize">
            <summary>
            Initializes this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine.TestRoundaboutEntry(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is a turn onto a roundabout.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine.TestRoundaboutArc(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Returns true if the given object is an arc of a roundabout.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine.TestNonRoundaboutExit(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is a turn out of a roundabout.
            </summary>
            <param name="test"></param>
            <param name="machine"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.RoundaboutMachine.TestRoundaboutExit(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is a turn out of a roundabout.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.MicroPlanning.Machines.TurnMachine">
            <summary>
            Machine to detect significant turns.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.TurnMachine.#ctor(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner)">
            <summary>
            Creates a new turn machine.
            </summary>
            <param name="planner"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.TurnMachine.Initialize">
            <summary>
            Initializes this machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.TurnMachine.TestNonSignificantTurn(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.Machines.TurnMachine.TestSignificantTurn(OsmSharp.Math.Automata.FiniteStateMachine{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage},System.Object)">
            <summary>
            Tests if the given turn is significant.
            </summary>
            <param name="machine"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner">
            <summary>
            Plans aggregated messages into instructions.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._interpreter">
            <summary>
            Holds the routing interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.#ctor(OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator,OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a new planner.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._current">
            <summary>
            Holds the current object from the aggregated stream.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.Plan(OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint)">
            <summary>
            Plans all the messages in the aggregated 
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.PlanNewMessage(OsmSharp.Routing.ArcAggregation.Output.Aggregated)">
            <summary>
            Creates and plans a new message.
            </summary>
            <param name="aggregated"></param>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._machines">
            <summary>
            Keeps a list of microplanners.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.InitializeMachines">
            <summary>
            Initializes the list of machines.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._messagesStack">
            <summary>
            Holds the current messages stack.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._invalid_machines">
            <summary>
            Holds the current list of invalid machines.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._valid_machines">
            <summary>
            Holds the current list of machines that reached a final machine.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._latest_final">
            <summary>
            Holds the position of the latest final.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._latest_machine">
            <summary>
            Holds the machine that finaled latest.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.InitializeMessagesStack">
            <summary>
            Initializes the messages stack.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.ResetMessagesStack(System.Boolean)">
            <summary>
            Resets the messages stack.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._succes">
            <summary>
            Boolean holding planning succes flag.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner._error">
            <summary>
            Boolean holding planning error flag.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.Plan(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage)">
            <summary>
            Plan the given message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.Success(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine)">
            <summary>
            The given machine was successfull.
            </summary>
            <param name="machine"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.CheckMachine(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine)">
            <summary>
            Checks the machine for success.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.ReportFinal(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine,System.Collections.Generic.IList{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage})">
            <summary>
            Reports a final state to this microplanner when some machine reaches it.
            </summary>
            <param name="machine"></param>
            <param name="messages"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.ReportReset(OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMachine)">
            <summary>
            Reports when a machine resets (meaning it reached an invalid state).
            </summary>
            <param name="machine"></param>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.Interpreter">
            <summary>
            Returns the routing interpreter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlanner.SentencePlanner">
            <summary>
            The scentence planner for this micro planner.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerException.#ctor(System.String,System.Collections.Generic.List{OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessage})">
            <summary>
            Creates a new microplanner exception.
            </summary>
            <param name="message"></param>
            <param name="messages_stack"></param>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessageArc.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessageArc.Arc">
            <summary>
            Gets or sets the aggregated arc.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessagePoint.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Instructions.MicroPlanning.MicroPlannerMessagePoint.Point">
            <summary>
            Gets or sets the aggregated point.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints">
            <summary>
            Handles default highway constraints.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Constraints.IRoutingConstraints">
            <summary>
            Represents some routing constraints.
            </summary>
            <remarks>Objects of this type can be used to constrain routes that will be found to certain criteria.</remarks>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.IRoutingConstraints.GetLabelFor(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Translates some tags into some routing label.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.IRoutingConstraints.ForwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if a given (forward) sequence of labels is allowed under these constraints.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.IRoutingConstraints.BackwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if a given (backward) sequence of labels is allowed under these constraints.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints._edge_intepreter">
            <summary>
            Holds the edge interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints.#ctor(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter)">
            <summary>
            Creates a new highway constraint.
            </summary>
            <param name="edge_intepreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints.GetLabelFor(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns a label for different categories of highways.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints.ForwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if the given sequence is allowed.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Cars.DefaultCarConstraints.BackwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if the given sequence is allowed.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints">
            <summary>
            Handles default highway constraints.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints._edge_intepreter">
            <summary>
            Holds the edge interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints.#ctor(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter)">
            <summary>
            Creates a new highway constraint.
            </summary>
            <param name="edge_intepreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints.GetLabelFor(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns a label for different categories of highways.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints.ForwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if the given sequence is allowed.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Constraints.Highways.DefaultHighwayConstraints.BackwardSequenceAllowed(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if the given sequence is allowed.
            </summary>
            <param name="sequence"></param>
            <param name="latest"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Constraints.RoutingLabel">
            <summary>
            Represents a routing label used to implement routing constraints.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabel.#ctor(System.Char,System.String)">
            <summary>
            Creates a new routing label.
            </summary>
            <param name="label"></param>
            <param name="description"></param>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabel.Equals(System.Object)">
            <summary>
            Returns true if equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabel.Equals(OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Returns true if the given object equals this object in content.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabel.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Constraints.RoutingLabel.Label">
            <summary>
            The actual label.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Constraints.RoutingLabel.Description">
            <summary>
            The description of the label.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Constraints.RoutingLabelExtensions">
            <summary>
            Contains extensions.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabelExtensions.CreateString(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel})">
            <summary>
            Constructs a string out of a list of labels.
            </summary>
            <param name="labels"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Constraints.RoutingLabelExtensions.CreateString(System.Collections.Generic.IList{OsmSharp.Routing.Constraints.RoutingLabel},OsmSharp.Routing.Constraints.RoutingLabel)">
            <summary>
            Constructs a string out of a list of labels and one extra label.
            </summary>
            <param name="labels"></param>
            <param name="extra"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Interpreter.IRoutingInterpreter">
            <summary>
            Interprets routing data abstracting the type of data.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.IRoutingInterpreter.IsRelevant(System.String)">
            <summary>
            Returns true if the given tag is relevant for this interpreter, false otherwise.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.IRoutingInterpreter.IsRelevant(System.String,System.String)">
            <summary>
            Returns true if the given key-value pair is relevant for this interpreter, false otherwise.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.IRoutingInterpreter.CanBeTraversed(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns true if the given vertices can be traversed in the given order.
            </summary>
            <param name="from"></param>
            <param name="along"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Interpreter.IRoutingInterpreter.EdgeInterpreter">
            <summary>
            Returns the edge interpreter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Interpreter.IRoutingInterpreter.Constraints">
            <summary>
            Returns the routing constraints.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter">
            <summary>
            Interpreter for edges in the routable data.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.IsRoutable(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if in some configuration this edge is traversable.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.CanBeTraversedBy(OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the edge with given tags can be traversed by the given vehicle.
            </summary>
            <param name="tags"></param>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.IsOnlyLocalAccessible(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is only locally accessible.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.GetName(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns the name of the edge represented by the tags.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.GetNamesInAllLanguages(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns the names of the edge represented by the tags in each available language.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter.IsRoundabout(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge with given properties is a roundabout.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Interpreter.Roads.TagsExtensions">
            <summary>
            Contains common tags extensions for usage in EdgeInterpreters.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Interpreter.Roads.TagsExtensions.GetNumericValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Returns a numeric value from a tags collection.
            </summary>
            <param name="tags"></param>
            <param name="key"></param>
            <returns></returns>
            <remarks>Uses the CultureInfo.InvariantCulture property to parse the data.</remarks>
        </member>
        <member name="T:OsmSharp.Routing.Gpx.RouteGpx">
            <summary>
            Converts an OsmSharpRoute into a gpx.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Gpx.RouteGpx.Save(System.IO.Stream,OsmSharp.Routing.Route)">
            <summary>
            Saves the route to a gpx file.
            </summary>
            <param name="file"></param>
            <param name="route"></param>
        </member>
        <member name="T:OsmSharp.Routing.RouterExtensions">
            <summary>
            Contains common IRouter extensions.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouterExtensions.CheckConnectivityAndRemoveInvalid(OsmSharp.Routing.Router,OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Checks connectivity of all given points and returns only those that are valid.
            </summary>
            <param name="router"></param>
            <param name="vehicle"></param>
            <param name="resolvedPoints"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Metrics.RouteMetricCalculator">
            <summary>
            Calculates route metrics.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Metrics.RouteMetricCalculator._interpreter">
            <summary>
            Holds a routing interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.RouteMetricCalculator.#ctor(OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a new metrics calculator.
            </summary>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.RouteMetricCalculator.Calculate(OsmSharp.Routing.Route)">
            <summary>
            Calculates metrics for the given route.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.RouteMetricCalculator.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint)">
            <summary>
            Does the metric calculations.
            </summary>
            <param name="vehicle"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Metrics.RouteMetricCalculator.Interpreter">
            <summary>
            Returns the routing interpreter.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Metrics.Time.TimeCalculator">
            <summary>
            A calculator to accurately estimate timings of a route.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Metrics.Time.TimeCalculator.TIME_KEY">
            <summary>
            Constant identifier for Time.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Metrics.Time.TimeCalculator.DISTANCE_KEY">
            <summary>
            Constant identifier for Distance.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.Time.TimeCalculator.#ctor(OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a new TimeCalculator.
            </summary>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.Time.TimeCalculator.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint)">
            <summary>
            Calculcates the metrics.
            </summary>
            <param name="vehicle"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.Time.TimeCalculator.CalculatePointMetrics(OsmSharp.Routing.Vehicle,System.Collections.Generic.Dictionary{System.String,System.Double},OsmSharp.Routing.ArcAggregation.Output.AggregatedPoint)">
            <summary>
            Calculate metrics for a given turn.
            </summary>
            <param name="vehicle"></param>
            <param name="result"></param>
            <param name="point"></param>
        </member>
        <member name="M:OsmSharp.Routing.Metrics.Time.TimeCalculator.CalculateArcMetrics(OsmSharp.Routing.Vehicle,System.Collections.Generic.Dictionary{System.String,System.Double},OsmSharp.Routing.ArcAggregation.Output.AggregatedArc)">
            <summary>
            Calculate metrics for a given arc.
            </summary>
            <param name="vehicle"></param>
            <param name="result"></param>
            <param name="arc"></param>
        </member>
        <member name="T:OsmSharp.Routing.Navigation.RouteTracker">
            <summary>
            A tracker to track the progress along a route.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._route">
            <summary>
            Holds the route to track.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._instructions">
            <summary>
            Holds the instructions list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Navigation.RouteTracker.#ctor(OsmSharp.Routing.Route,OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a route tracker that tracks the given route and it's instructions.
            </summary>
            <param name="route"></param>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Navigation.RouteTracker.#ctor(OsmSharp.Routing.Route,OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Instructions.LanguageGeneration.ILanguageGenerator)">
            <summary>
            Creates a route tracker that tracks the given route and it's instructions.
            </summary>
            <param name="route"></param>
            <param name="interpreter"></param>
            <param name="languageGenerator"></param>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._currentRoutePosition">
            <summary>
            Holds the current position along the given route. 
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._currentPosition">
            <summary>
            Holds the current position.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._nextInstructionIdx">
            <summary>
            Holds the index of the next instruction.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._distanceFromStart">
            <summary>
            Holds the distance from the start location.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._distanceToEnd">
            <summary>
            Holds the distance to the end location.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Navigation.RouteTracker.PositionAfter(OsmSharp.Units.Distance.Meter)">
            <summary>
            Returns the position after the given distance is travelled relative to the current position.
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Navigation.RouteTracker._distanceNextInstruction">
            <summary>
            Holds the distance to the next instruction.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Navigation.RouteTracker.Track(OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Updates the tracker with the given location.
            </summary>
            <param name="location">The measured location.</param>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.PositionRoute">
            <summary>
            Returns the position on the route closest to the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.Position">
            <summary>
            Returns the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.PositionNextInstruction">
            <summary>
            Returns the position on the route of the next instruction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.DistanceFromStart">
            <summary>
            Returns the distance between the start position and the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.DistanceToEnd">
            <summary>
            Returns the distance between the end position and the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.DistanceNextInstruction">
            <summary>
            Returns the distance between the current position and the route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.NextInstruction">
            <summary>
            Returns the next instruction.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.NextInstructionIdx">
            <summary>
            Returns the next instruction index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Navigation.RouteTracker.NextInstructionList">
            <summary>
            Returns the instruction list that 
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.LiveEdge">
            <summary>
            A simple edge containing the orignal OSM-tags and a flag indicating the direction of this edge relative to the 
            OSM-direction.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.LiveEdge._value">
            <summary>
            Contains a value that represents tagsId and forward flag [forwardFlag (true when zero)][tagsIdx].
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.LiveEdge.Equals(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.LiveEdge.EqualsGeometrically(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same geographical information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.Value">
            <summary>
            Gets/sets the value.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.Forward">
            <summary>
            Flag indicating if this is a forward or backward edge relative to the tag descriptions.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.Tags">
            <summary>
            The properties of this edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.Coordinates">
            <summary>
            Gets or sets the list of intermediate coordinates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.Distance">
            <summary>
            Gets/or sets the total distance of this edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.LiveEdge.RepresentsNeighbourRelations">
            <summary>
            Returns true if this edge represents a neighbour-relation.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer">
            <summary>
            Serializes/deserializes edges.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.CreateGraph(OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Creates the graph to deserialize into.
            </summary>
            <param name="tagsCollectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializeEdges(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge})">
            <summary>
            Serializes all edges.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.DeserializeEdges(OsmSharp.IO.LimitedStream,System.Int64,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge})">
            <summary>
            Deserializes all edges.
            </summary>
            <param name="stream"></param>
            <param name="size"></param>
            <param name="graph"></param>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.VersionString">
            <summary>
            Returns the version string.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge">
            <summary>
            A serializable edge.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge.FromId">
            <summary>
            Gets or sets the from id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge.ToId">
            <summary>
            Gets or sets the to id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.LiveEdgeFlatfileSerializer.SerializableEdge.Coordinates">
            <summary>
            Gets or sets the coordinates.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor">
            <summary>
            Pre-processor to simplify a graph made out of live edges.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor._graph">
            <summary>
            Holds the graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor.#ctor(OsmSharp.Routing.Graph.IDynamicGraph{OsmSharp.Routing.Osm.Graphs.LiveEdge})">
            <summary>
            Creates a new pre-processor.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor.Start">
            <summary>
            Starts pre-processing all nodes.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor.CompressGraph">
            <summary>
            Compresses the graph by deleting vertices.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.PreProcessing.LiveEdgePreprocessor.Overlaps(OsmSharp.Routing.Osm.Graphs.LiveEdge,OsmSharp.Routing.Osm.Graphs.LiveEdge)">
            <summary>
            Returns true if the given edge1 overlaps the given edge2.
            </summary>
            <param name="edge1"></param>
            <param name="edge2"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource">
            <summary>
            A router data source that dynamically loads data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._vertices">
            <summary>
            Holds all graph data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._coordinates">
            <summary>
            Holds the coordinates of the vertices.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._tagsIndex">
            <summary>
            Holds the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._vertexIndex">
            <summary>
            Holds the vertex index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._vehicles">
            <summary>
            Holds the list of vehicles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.#ctor(System.IO.Stream,System.Boolean,OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas,System.Int32,OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates a new router data source.
            </summary>
            <param name="stream"></param>
            <param name="compressed"></param>
            <param name="tileMetas"></param>
            <param name="zoom"></param>
            <param name="v1RoutingDataSourceSerializer"></param>
            <param name="vehicles"></param>
            <param name="initialCapacity"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.SupportsProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.AddSupportedProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given profile is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.GetArcs(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Returns all edges inside the given boundingbox.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.GetVertex(System.UInt32,System.Single@,System.Single@)">
            <summary>
            Returns the location of the vertex with the given id.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.GetVertices">
            <summary>
            Returns all vertices in this router data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.GetArcs(System.UInt32)">
            <summary>
            Returns all arcs for the given vertex.
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.HasArc(System.UInt32,System.UInt32)">
            <summary>
            Returns true if the given vertex has the given neighbour.
            </summary>
            <param name="vertexId"></param>
            <param name="neighbour"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._stream">
            <summary>
            Holds the stream containing the graph data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._compressed">
            <summary>
            Holds flag indicating that the data in the stream is compressed.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._routingDataSourceSerializer">
            <summary>
            Holds the routing serializer.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._graphTileMetas">
            <summary>
            Holds the tile metas.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._loadedTiles">
            <summary>
            Holds the loaded tiles.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._tilesPerVertex">
            <summary>
            Holds the tile to get the current vertex.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource._zoom">
            <summary>
            The zoom level of the cached tiles.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Resize(System.UInt32)">
            <summary>
            Resize if needed.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.LoadMissingTile(OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Loads all missing tiles.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.LoadMissingTile(OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Loads the missing tile at the given coordinate.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.LoadMissingTile(OsmSharp.Osm.Tiles.Tile)">
            <summary>
            Loads the missing tiles.
            </summary>
            <param name="tile"></param>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.VertexCount">
            <summary>
            Returns the vertex count.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Vertex">
            <summary>
            Represents a simple vertex.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Vertex.Arcs">
            <summary>
            Holds an array of edges starting at this vertex.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Location">
            <summary>
            Represents the location.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Location.Latitude">
            <summary>
            Gets/sets the latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.Location.Longitude">
            <summary>
            Gets/sets the longitude.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.TileStreamPosition">
            <summary>
            A tile stream position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.TileStreamPosition.Offset">
            <summary>
            Gets/sets the offset.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RouterLiveEdgeDataSource.TileStreamPosition.Length">
            <summary>
            Gets/sets the length.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer">
            <summary>
            A v2 routing serializer.
            </summary>
            <remarks>Versioning is implemented in the file format to guarantee backward compatibility.</remarks>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.TileMetaSize">
            <summary>
            Holds the size of the tile meta.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.Zoom">
            <summary>
            Holds the zoom.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer._compress">
            <summary>
            Holds the compression flag.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer._runtimeTypeModel">
            <summary>
            Holds the runtime type model.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.#ctor(System.Boolean)">
            <summary>
            Creates a new v2 serializer.
            </summary>
            <param name="compress">Flag telling this serializer to compress it's data.</param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.DoSerialize(OsmSharp.IO.LimitedStream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge})">
            <summary>
            Does the v1 serialization.
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.DoDeserialize(OsmSharp.IO.LimitedStream,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does the v1 deserialization.
            </summary>
            <param name="stream"></param>
            <param name="lazy"></param>
            <param name="vehicles"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.DeserializeTile(System.IO.Stream,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Deserialize the given tile data.
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="decompress"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.VersionString">
            <summary>
            Returns the version string.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.UnserializedTileData.Ids">
            <summary>
            Gets/sets the ids.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.UnserializedTileData.Latitude">
            <summary>
            Gets/sets the offset of the latitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.UnserializedTileData.Longitude">
            <summary>
            Gets/sets the offset of the longitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.UnserializedTileData.StringTable">
            <summary>
            Gets/sets the stringtable.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.UnserializedTileData.Arcs">
            <summary>
            Gets/sets the vertices.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas">
            <summary>
            Serializable object containing all metadata tiles.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas.TileX">
            <summary>
            The tile x-coordinates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas.TileY">
            <summary>
            The tile y-coordinates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas.Offset">
            <summary>
            The tile offsets.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTileMetas.Length">
            <summary>
            The tile lengths.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile">
            <summary>
            Serializable object containing all data in a dynamic graph in one tile.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile.Ids">
            <summary>
            Gets/sets the ids.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile.Latitude">
            <summary>
            Gets/sets the offset of the latitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile.Longitude">
            <summary>
            Gets/sets the offset of the longitude relative to the upper-right corner.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile.StringTable">
            <summary>
            Gets/sets the stringtable.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphTile.Arcs">
            <summary>
            Gets/sets the vertices.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs">
            <summary>
            Serializable object containt all data about one arc.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.DestinationId">
            <summary>
            Gets/sets the destination id.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.TileX">
            <summary>
            Gets/sets the tile x-coordinate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.TileY">
            <summary>
            Gets/sets the tile y-coordinate.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.Forward">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.Tags">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.Intermediates">
            <summary>
            Gets/sets the intermediates.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableGraphArcs.Distances">
            <summary>
            Gets/sets the distances.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinates">
            <summary>
            Serializable coordinates list.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinates.Coordinates">
            <summary>
            Gets/sets the intermediates.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate">
            <summary>
            Serializable coordinate.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate.ToSimpleArray(OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate[])">
            <summary>
            Returns a simple array.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate.FromSimpleArray(OsmSharp.Math.Geo.Simple.GeoCoordinateSimple[])">
            <summary>
            Returns a simple array.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate.Latitude">
            <summary>
            Gets/sets the latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableCoordinate.Longitude">
            <summary>
            Gets/sets the longitude.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableTags">
            <summary>
            Serializeable version of a series of tags.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableTags.Keys">
            <summary>
            Holds all the keys.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Graphs.Serialization.V2RoutingDataSourceLiveEdgeSerializer.SerializableTags.Values">
            <summary>
            Holds all the values.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter">
            <summary>
                Default edge interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.IsOnlyLocalAccessible(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge with the given tags is only accessible locally.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.IsRoutable(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge with the given tags is routable.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.GetName(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns the name of a given way.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.GetNamesInAllLanguages(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns all the names in all languages and alternatives.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.IsRoundabout(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge with the given properties represents a roundabout.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.Edge.EdgeInterpreter.CanBeTraversedBy(OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the edge with given tags can be traversed by the given vehicle.
            </summary>
            <param name="tags"></param>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter">
            <summary>
            An abstract representation of an osm routing interpreter.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter.IsRestriction(OsmSharp.Osm.OsmGeoType,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the given object possibly presents a restriction for any vehicle.
            </summary>
            <param name="type"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter.CalculateRestrictions(OsmSharp.Osm.Node)">
            <summary>
            Calculates all restrictions for the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter.CalculateRestrictions(OsmSharp.Osm.CompleteRelation)">
            <summary>
            Calculates all restrictions for a given relation.
            </summary>
            <param name="completeRelation"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter">
            <summary>
            A routing interpreter for OSM data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter._edgeInterpreter">
            <summary>
            Holds the edge interpreter.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter._constraints">
            <summary>
            Holds the routing constraints.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter._relevantKeys">
            <summary>
            Holds the relevant keys.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.#ctor">
            <summary>
            Creates a new routing intepreter with default settings.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.#ctor(OsmSharp.Routing.Constraints.IRoutingConstraints)">
            <summary>
            Creates a new routing interpreter with given constraints.
            </summary>
            <param name="constraints"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.#ctor(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter)">
            <summary>
            Creates a new routing interpreter a custom edge interpreter.
            </summary>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.FillRelevantTags">
            <summary>
            Builds the list of relevant tags.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.IsRelevant(System.String)">
            <summary>
            Returns true if the given tags is relevant.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.IsRelevant(System.String,System.String)">
            <summary>
            Returns true if the given key value pair is relevant.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.CanBeTraversed(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns true if the given vertices can be traversed in the given order.
            </summary>
            <param name="from"></param>
            <param name="along"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.IsRestriction(OsmSharp.Osm.OsmGeoType,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the given object can be a routing restriction.
            </summary>
            <param name="type"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.CalculateRestrictions(OsmSharp.Osm.Node)">
            <summary>
            Returns all restrictions that are represented by the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.CalculateRestrictions(OsmSharp.Osm.CompleteRelation)">
            <summary>
            Returns all restrictions that are represented by the given node.
            </summary>
            <param name="completeRelation"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.EdgeInterpreter">
            <summary>
            Returns and edge interpreter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Interpreter.OsmRoutingInterpreter.Constraints">
            <summary>
            Returns the constraints.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Streams.CHEdgeGraphFileStreamTarget">
            <summary>
            Implements a streaming target that converts the given OSM-data into a serialized graph.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget">
            <summary>
            A pre-processing target for OSM-data to a CH data structure.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1">
            <summary>
            Data Processor Target to fill a dynamic graph object.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._dynamicGraph">
            <summary>
            Holds the dynamic graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._interpreter">
            <summary>
            The interpreter for osm data.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._tagsIndex">
            <summary>
            Holds the tags index.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._dataCache">
            <summary>
            Holds the osm data cache.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._preIndexMode">
            <summary>
            True when this target is in pre-index mode.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._box">
            <summary>
            The bounding box to limit nodes if any.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._edgeComparer">
            <summary>
            Holds the edge comparer.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{`0},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0})">
            <summary>
            Creates a new processor target.
            </summary>
            <param name="dynamicGraph">The graph that will be filled.</param>
            <param name="interpreter">The interpreter to generate the edge data.</param>
            <param name="edgeComparer"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{`0},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0},OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Creates a new processor target.
            </summary>
            <param name="dynamicGraph">The graph that will be filled.</param>
            <param name="interpreter">The interpreter to generate the edge data.</param>
            <param name="edgeComparer"></param>
            <param name="tagsIndex"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{`0},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0},OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IDictionary{System.Int64,System.UInt32})">
            <summary>
            Creates a new processor target.
            </summary>
            <param name="dynamicGraph">The graph that will be filled.</param>
            <param name="interpreter">The interpreter to generate the edge data.</param>
            <param name="edgeComparer"></param>
            <param name="tagsIndex"></param>
            <param name="idTransformations"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{`0},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Graph.IDynamicGraphEdgeComparer{`0},OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Creates a new processor target.
            </summary>
            <param name="dynamicGraph">The graph that will be filled.</param>
            <param name="interpreter">The interpreter to generate the edge data.</param>
            <param name="edgeComparer"></param>
            <param name="tagsIndex"></param>
            <param name="idTransformations"></param>
            <param name="box"></param>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._bounds">
            <summary>
            Holds the bounds of the nodes that have been added up until now.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._coordinates">
            <summary>
            Holds the coordinates.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._preIndex">
            <summary>
            Holds the index of all relevant nodes.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._idTransformations">
            <summary>
            Holds the id transformations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.Initialize">
            <summary>
            Initializes the processing.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.AddNode(OsmSharp.Osm.Node)">
            <summary>
            Adds the given node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._usedTwiceOrMore">
            <summary>
            Holds a list of nodes used twice or more.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.AddWay(OsmSharp.Osm.Way)">
            <summary>
            Adds a given way.
            </summary>
            <param name="way"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.AddRoadNode(System.Int64)">
            <summary>
            Adds a node that is at least part of one road.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.AddRoadEdge(OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Adds an edge.
            </summary>
            <param name="forward"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="tags"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.CalculateEdgeData(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Calculates the edge data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.CalculateIsTraversable(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge can be traversed.
            </summary>
            <param name="edgeInterpreter"></param>
            <param name="tagsIndex"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._waysToCache">
            <summary>
            Holds the ways to cache to complete the restriction reations.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1._nodesToCache">
            <summary>
            Holds the node to cache to complete the restriction relations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.AddRelation(OsmSharp.Osm.Relation)">
            <summary>
            Adds a given relation.
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.GetPreprocessor">
            <summary>
            Returns a pre-processor if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.RegisterSource(OsmSharp.Osm.Streams.OsmStreamSource)">
            <summary>
            Registers the source for this target.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.OnBeforePull">
            <summary>
            Called right before pull and right after initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.OnAfterPull">
            <summary>
            Called right after pull.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.TagsIndex">
            <summary>
            Returns the tags index.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.DynamicGraph">
            <summary>
            Returns the target graph.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.Interpreter">
            <summary>
            Returns the osm routing interpreter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.EdgeComparer">
            <summary>
            Returns the edge comparer.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Osm.Streams.Graphs.DynamicGraphOsmStreamWriter`1.Box">
            <summary>
            Returns the boundingbox of all accepted nodes.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget._vehicle">
            <summary>
            Holds the vehicle profile this pre-processing target is for.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Routing.Vehicle)">
            <summary>
            Creates a CH data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="vehicle"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.Initialize">
            <summary>
            Initializes the processing.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.CalculateEdgeData(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Calculates edge data.
            </summary>
            <param name="edgeInterpreter"></param>
            <param name="tagsIndex"></param>
            <param name="tags"></param>
            <param name="directionForward"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.CalculateIsTraversable(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is traversable.
            </summary>
            <param name="edgeInterpreter"></param>
            <param name="tagsIndex"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.Preprocess(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Vehicle,System.Boolean)">
            <summary>
            Preprocesses the data from the given OsmStreamReader and converts it directly to a routable data source.
            </summary>
            <param name="reader"></param>
            <param name="tagsIndex"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <param name="keepDirectNeighbours"></param>
            <param name="preProcessingPercentage"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.Preprocess(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Vehicle)">
            <summary>
            Preprocesses the data from the given OsmStreamReader and converts it directly to a routable data source.
            </summary>
            <param name="reader"></param>
            <param name="tagsIndex"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.CHEdgeGraphOsmStreamTarget.Preprocess(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Vehicle)">
            <summary>
            Preprocesses the data from the given OsmStreamReader and converts it directly to a routable data source.
            </summary>
            <param name="reader"></param>
            <param name="interpreter"></param>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.CHEdgeGraphFileStreamTarget._graphStream">
            <summary>
            Holds the graph output stream.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.CHEdgeGraphFileStreamTarget.#ctor(System.IO.Stream,OsmSharp.Routing.Graph.DynamicGraphRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Routing.Vehicle)">
            <summary>
            Creates a new target.
            </summary>
            <param name="stream"></param>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="vehicle"></param>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.CHEdgeGraphFileStreamTarget._graph">
            <summary>
            Holds the graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.CHEdgeGraphFileStreamTarget.Flush">
            <summary>
            Flushes all data.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget">
            <summary>
            A data processing target containing edges with the orignal OSM-tags and their original OSM-direction.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget._vehicles">
            <summary>
            Holds the list of vehicle profiles to build routing information for.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex)">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="interpreter">Inteprets the OSM-data.</param>
            <param name="tagsIndex">Holds all the tags.</param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IDictionary{System.Int64,System.UInt32})">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="idTransformations"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Math.Geo.GeoCoordinateBox)">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="box"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IEnumerable{OsmSharp.Routing.Vehicle})">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="vehicles"></param>
            <param name="interpreter">Inteprets the OSM-data.</param>
            <param name="tagsIndex">Holds all the tags.</param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},System.Collections.Generic.IEnumerable{OsmSharp.Routing.Vehicle})">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="vehicles"></param>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="idTransformations"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Math.Geo.GeoCoordinateBox,System.Collections.Generic.IEnumerable{OsmSharp.Routing.Vehicle})">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="vehicles"></param>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="box"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.#ctor(OsmSharp.Routing.Graph.Router.IDynamicGraphRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},OsmSharp.Math.Geo.GeoCoordinateBox,System.Collections.Generic.IEnumerable{OsmSharp.Routing.Vehicle})">
            <summary>
            Creates a new osm edge data processing target.
            </summary>
            <param name="dynamicGraph"></param>
            <param name="interpreter"></param>
            <param name="tagsIndex"></param>
            <param name="idTransformations"></param>
            <param name="box"></param>
            <param name="vehicles">The vehicle profiles to build routing information for.</param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.AddRoadEdge(OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Adds an edge.
            </summary>
            <param name="forward"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="tags"></param>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.CalculateEdgeData(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Calculates edge data.
            </summary>
            <param name="tagsIndex"></param>
            <param name="tags"></param>
            <param name="directionForward"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="edgeInterpreter"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.CalculateIsTraversable(OsmSharp.Routing.Interpreter.Roads.IEdgeInterpreter,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is traversable.
            </summary>
            <param name="edgeInterpreter"></param>
            <param name="tagsIndex"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.GetPreprocessor">
            <summary>
            Returns the pre-processor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.Preprocess(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Collections.Tags.Index.ITagsCollectionIndex,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter)">
            <summary>
            Preprocesses the data from the given OsmStreamReader and converts it directly to a routable data source.
            </summary>
            <param name="reader"></param>
            <param name="tagsIndex"></param>
            <param name="interpreter"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Osm.Streams.Graphs.LiveGraphOsmStreamTarget.Preprocess(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter)">
            <summary>
            Preprocesses the data from the given OsmStreamReader and converts it directly to a routable data source.
            </summary>
            <param name="reader"></param>
            <param name="interpreter"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Route">
            <summary>
            Class representing a route generated by OsmSharp.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Route.#ctor">
            <summary>
            Creates a new route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Route.Save(System.IO.Stream)">
            <summary>
            Saves a serialized version to a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OsmSharp.Routing.Route.SaveToByteArray">
            <summary>
            Saves the route as a byte stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.Load(System.IO.Stream)">
            <summary>
            Parses a route from a data stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.Load(System.Byte[])">
            <summary>
            Parses a route from a byte array.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.SaveAsGpx(System.IO.Stream)">
            <summary>
            Save the route as GPX.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:OsmSharp.Routing.Route.Concatenate(OsmSharp.Routing.Route,OsmSharp.Routing.Route)">
            <summary>
            Concatenates two routes.
            </summary>
            <param name="route1"></param>
            <param name="route2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.Concatenate(OsmSharp.Routing.Route,OsmSharp.Routing.Route,System.Boolean)">
            <summary>
            Concatenates two routes.
            </summary>
            <param name="route1"></param>
            <param name="route2"></param>
            <param name="clone"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.GetBox">
            <summary>
            Returns the bounding box around this route.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.GetPoints">
            <summary>
            Returns the points along the route for the entire route in the correct order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.PositionAfter(OsmSharp.Units.Distance.Meter)">
            <summary>
            Calculates the position on the route after the given distance from the starting point.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.ProjectOn(OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate@)">
            <summary>
            Calculates the closest point on the route relative to the given coordinate.
            </summary>
            <param name="coordinates"></param>
            <param name="projectedCoordinates"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.ProjectOn(OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate@,OsmSharp.Units.Distance.Meter@)">
            <summary>
            Calculates the closest point on the route relative to the given coordinate.
            </summary>
            <param name="coordinates"></param>
            <param name="projectedCoordinates"></param>
            <param name="distanceToProjected"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.ProjectOn(OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Units.Distance.Meter@)">
            <summary>
            Calculates the closest point on the route relative to the given coordinate.
            </summary>
            <param name="coordinates"></param>
            <param name="distanceToProjected"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.ProjectOn(OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate@,System.Int32@,OsmSharp.Units.Distance.Meter@)">
            <summary>
            Calculates the closest point on the route relative to the given coordinate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Route.GetRouteEnumerable(OsmSharp.Units.Distance.Meter)">
            <summary>
            Returns an enumerable of route positions with the given interval between them.
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Route.Vehicle">
            <summary>
            The vehicle type this route was created for.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.Tags">
            <summary>
            Tags for this route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.Metrics">
            <summary>
            Route metrics.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.Entries">
            <summary>
            An ordered array of route entries reprenting the details of the route to the next
            route point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.TimeStamp">
            <summary>
            A timestamp for this route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.TotalDistance">
            <summary>
            The distance in meter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Route.TotalTime">
            <summary>
            The time in seconds.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RoutePoint">
            <summary>
            Structure representing one point in a route that has been routed to.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RoutePoint.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RoutePoint.RepresentsSame(OsmSharp.Routing.RoutePoint)">
            <summary>
            Returns true if the given point has the same name tags and positiong.
            </summary>
            <param name="routePoint"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Name">
            <summary>
            The name of the point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Latitude">
            <summary>
            The latitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Longitude">
            <summary>
            The longitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Tags">
            <summary>
            Tags for this route point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Metrics">
            <summary>
            Route metrics.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Distance">
            <summary>
            Distance in meter to reach this point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePoint.Time">
            <summary>
            Estimated time in seconds to reach this point.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RoutePointEntry">
            <summary>
            Structure representing one point in a route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RoutePointEntry.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Type">
            <summary>
            The type of this entry.
            Start: Has no way from, distance from, angle or angles on poi's.
            Along: Has all data.
            Stop: Has all data but is the end point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Latitude">
            <summary>
            The latitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Longitude">
            <summary>
            The longitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Tags">
            <summary>
            Tags of this entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Metrics">
            <summary>
            Route metrics.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Distance">
            <summary>
            Distance in meter to reach this part of the route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Time">
            <summary>
            Estimated time in seconds to reach this part of the route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.Points">
            <summary>
            The points this route travels along.
            
            Between each two points there exists a route represented by the entries array.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.WayFromName">
            <summary>
            The name of the way the route comes from.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.WayFromNames">
            <summary>
            All the names of the ways indexed according to the alpha-2 code of ISO 639-1.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntry.SideStreets">
            <summary>
            The side streets entries.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RoutePointEntryType">
            <summary>
            Represents a type of point entry.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RoutePointEntryType.Start">
            <summary>
            Start type.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RoutePointEntryType.Along">
            <summary>
            Along type.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RoutePointEntryType.Stop">
            <summary>
            Stop type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RoutePointEntrySideStreet">
            <summary>
            Route point entry.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RoutePointEntrySideStreet.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntrySideStreet.Latitude">
            <summary>
            The latitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntrySideStreet.Longitude">
            <summary>
            The longitude of the entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntrySideStreet.Tags">
            <summary>
            Tags of this entry.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntrySideStreet.WayName">
            <summary>
            The name of the way the route comes from.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RoutePointEntrySideStreet.WayNames">
            <summary>
            All the names of the ways indexed according to the alpha-2 code of ISO 639-1.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RouteTags">
            <summary>
            Represents a key value pair.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouteTags.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTags.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RouteTags.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RouteTags.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RouteTagsExtensions">
            <summary>
            Contains extensions for route tags.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.ConvertFrom(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Converts a dictionary of tags to a RouteTags array.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.ConvertToTagsCollection(OsmSharp.Routing.RouteTags[])">
            <summary>
            Converts a RouteTags array to a list of KeyValuePairs.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.ConvertFrom(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary of tags to a RouteTags array.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.ConvertFrom(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Converts a list of KeyValuePairs to a RouteTags array.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.ConvertTo(OsmSharp.Routing.RouteTags[])">
            <summary>
            Converts a RouteTags array to a list of KeyValuePairs.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.GetValueFirst(OsmSharp.Routing.RouteTags[],System.String)">
            <summary>
            Returns the value of the first tag with the key given.
            </summary>
            <param name="tags"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteTagsExtensions.GetValues(OsmSharp.Routing.RouteTags[],System.String)">
            <summary>
            Returns all values for a given key.
            </summary>
            <param name="tags"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.RouteMetric">
            <summary>
            Represents a key value pair.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouteMetric.ConvertFrom(System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Convert from a regular tag dictionary.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteMetric.ConvertTo(OsmSharp.Routing.RouteMetric[])">
            <summary>
            Converts to regular tags list.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteMetric.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RouteMetric.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RouteMetric.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RouteEnumerable">
            <summary>
            An enumerator for an OsmSharpRoute.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RouteEnumerable._route">
            <summary>
            Holds the router being enumerated.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RouteEnumerable._intervalMeter">
            <summary>
            Holds the interval.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouteEnumerable.#ctor(OsmSharp.Routing.Route)">
            <summary>
            Creates a new OsmSharpRoute enumerable.
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:OsmSharp.Routing.RouteEnumerable.#ctor(OsmSharp.Routing.Route,OsmSharp.Units.Distance.Meter)">
            <summary>
            Creates a new OsmSharpRoute enumerable.
            </summary>
            <param name="route"></param>
            <param name="interval"></param>
        </member>
        <member name="M:OsmSharp.Routing.RouteEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.RouteEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.OsmSharpRouteEnumerator">
            <summary>
            An enumerator for an OsmSharpRoute.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.OsmSharpRouteEnumerator._route">
            <summary>
            Holds the router being enumerator.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.OsmSharpRouteEnumerator._intervalMeter">
            <summary>
            Holds the interval between enumerations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.OsmSharpRouteEnumerator.#ctor(OsmSharp.Routing.Route,System.Double)">
            <summary>
            Creates a new OsmSharpRoute enumerator.
            </summary>
            <param name="route"></param>
            <param name="intervalMeter"></param>
        </member>
        <member name="F:OsmSharp.Routing.OsmSharpRouteEnumerator._currentMeter">
            <summary>
            Holds the current meter.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.OsmSharpRouteEnumerator._current">
            <summary>
            Holds the current position.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.OsmSharpRouteEnumerator.Dispose">
            <summary>
            Disposes all resource associated with this enumerator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.OsmSharpRouteEnumerator.MoveNext">
            <summary>
            Returns true if the move to the next position was succesfull.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.OsmSharpRouteEnumerator.Reset">
            <summary>
            Resets this enumerator.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.OsmSharpRouteEnumerator.Current">
            <summary>
            Returns the current position.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.OsmSharpRouteEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current position.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Router">
            <summary>
            Interface representing a router.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Routers.ITypedRouter">
            <summary>
            Abstracts the functionality of implemented by any TypeRouter class.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.SupportsVehicle(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle type is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates a route between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="target">The target point.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint,System.Single,System.Boolean)">
            <summary>
            Calculates a route between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="target">The target point.</param>
            <param name="max">The maximum weight to stop the calculation.</param>
            <param name="geometryOnly">Returns only the route geometry when true.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a shortest route from a given point to any of the targets points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="targets">The target point(s).</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Calculates a shortest route from a given point to any of the targets points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="targets">The target point(s).</param>
            <param name="max">The maximum weight to stop the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateOneToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between one source and many target points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateManyToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between many sources/targets.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates the weight between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateOneToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a route between one source and many target points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateManyToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between many sources/targets.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CalculateRange(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Returns all points located at a given weight (distance/time) from the orgin.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="orgine"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Returns true if the given point is connected for a radius of at least the given weight.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Returns true if the given point is connected for a radius of at least the given weight.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="verticesOnly">When true only vertices are returned.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinates">The location of the points to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinates">The location of the points to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Search(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Searches for a closeby link to the road network.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to search.</param>
            <returns></returns>
            <remarks>Similar to resolve except no resolved point is created.</remarks>
        </member>
        <member name="M:OsmSharp.Routing.Routers.ITypedRouter.Search(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Searches for a closeby link to the road network.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to search.</param>
            <returns></returns>
            <remarks>Similar to resolve except no resolved point is created.</remarks>
        </member>
        <member name="P:OsmSharp.Routing.Routers.ITypedRouter.IsCalculateRangeSupported">
            <summary>
            Returns true if range calculation is supported.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Router._router">
            <summary>
            Holds the basic router implementation.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Router.#ctor(OsmSharp.Routing.Routers.ITypedRouter)">
            <summary>
            Creates a new router with the given router implementation.
            </summary>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.Router.CreateLiveFrom(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter)">
            <summary>
            Creates a router using live interpreted edges.
            </summary>
            <param name="reader">The OSM-stream reader.</param>
            <param name="interpreter">The routing interpreter.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CreateLiveFrom(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a router using live interpreted edges.
            </summary>
            <param name="data">The data to route on.</param>
            <param name="interpreter">The routing interpreter.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CreateLiveFrom(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Graph.Router.IBasicRouter{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a router using live interpreted edges.
            </summary>
            <param name="data">The data to route on.</param>
            <param name="basicRouter">A custom routing implementation.</param>
            <param name="interpreter">The routing interpreter.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CreateCHFrom(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Graph.Router.IBasicRouter{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a router using live interpreted edges.
            </summary>
            <param name="data">The data to route on.</param>
            <param name="basicRouter">A custom routing implementation.</param>
            <param name="interpreter">The routing interpreter.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CreateCHFrom(OsmSharp.Osm.Streams.OsmStreamSource,OsmSharp.Routing.Osm.Interpreter.IOsmRoutingInterpreter,OsmSharp.Routing.Vehicle)">
            <summary>
            Creates a router using live interpreted edges.
            </summary>
            <param name="reader">The data to route on.</param>
            <param name="interpreter">The routing interpreter.</param>
            <param name="vehicle">The vehicle profile.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.SupportsVehicle(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle type is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates a route between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="target">The target point.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint,System.Single,System.Boolean)">
            <summary>
            Calculates a route between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="target">The target point.</param>
            <param name="max">The maximum weight to stop the calculation.</param>
            <param name="geometryOnly">Returns the geometry only when true.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a shortest route from a given point to any of the targets points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="targets">The target point(s).</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Calculates a shortest route from a given point to any of the targets points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source">The source point.</param>
            <param name="targets">The target point(s).</param>
            <param name="max">The maximum weight to stop the calculation.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateOneToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between one source and many target points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateManyToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between many sources/targets.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates the weight between two given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateOneToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a route between one source and many target points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateManyToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all routes between many sources/targets.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CalculateRange(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Returns all points located at a given weight (distance/time) from the orgin.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="orgine"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Returns true if the given point is connected for a radius of at least the given weight.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Returns true if the given point is connected for a radius of at least the given weight.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="verticesOnly">Returns vertices only..</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves a point.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinates">The location of the points to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves all the given points.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinates">The location of the points to resolve.</param>
            <param name="matcher">The matcher containing some matching algorithm.</param>
            <param name="matchingTags">Extra matching data.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Router.Search(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Searches for a closeby link to the road network.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="coordinate">The location of the point to search.</param>
            <returns></returns>
            <remarks>Similar to resolve except no resolved point is created.</remarks>
        </member>
        <member name="M:OsmSharp.Routing.Router.Search(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Searches for a closeby link to the road network.
            </summary>
            <param name="vehicle">The vehicle profile.</param>
            <param name="delta">The size of the box to search in.</param>
            <param name="coordinate">The location of the point to search.</param>
            <returns></returns>
            <remarks>Similar to resolve except no resolved point is created.</remarks>
        </member>
        <member name="P:OsmSharp.Routing.Router.IsCalculateRangeSupported">
            <summary>
            Returns true if range calculation is supported.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.RouterPoint">
            <summary>
            Represents a resolved point. A hook for the router to route on.
            
            The object represents a location and can be tagged.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.RouterPoint._id">
            <summary>
            Holds the id of this router point.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.RouterPoint.#ctor(System.Int64,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Creates a new router point.
            </summary>
            <param name="id"></param>
            <param name="location"></param>
        </member>
        <member name="M:OsmSharp.Routing.RouterPoint.ToString">
            <summary>
            Returns a description of this router point.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.RouterPoint.Id">
            <summary>
            Returns the id of this router point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RouterPoint.Location">
            <summary>
            Returns the location of this router point.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.RouterPoint.Tags">
            <summary>
            Gets/sets the tags.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouter`1">
            <summary>
            A class that implements common functionality for any routing algorithm.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1.DefaultSearchDelta">
            <summary>
            The default search delta.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1.IntermediatePoints">
            <summary>
            Holds the intermediate points ids.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._dataGraph">
            <summary>
            Holds the graph object containing the routable network.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._router">
            <summary>
            Holds the basic router that works on the dynamic graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._interpreter">
            <summary>
            Interpreter for the routing network.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.#ctor(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{`0},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Graph.Router.IBasicRouter{`0})">
            <summary>
            Creates a new router.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.SupportsVehicle(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates a route from source to target.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Calculate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint,System.Single,System.Boolean)">
            <summary>
            Calculates a route from source to target but does not search more than max around source or target location.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a route from source to the closest target point.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateToClosest(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Calculates a route from source to the closest target point but does not search more than max around source location.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateOneToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all the routes between the source and all given targets.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateManyToMany(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all the routes between all the sources and all the targets.
            </summary>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Calculates the weight from source to target.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateOneToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all the weights from source to all the targets.
            </summary>
            <param name="vehicle"></param>
            <param name="source"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateManyToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates all the weights between all the sources and all the targets.
            </summary>
            <param name="vehicle"></param>
            <param name="sources"></param>
            <param name="targets"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CalculateRange(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Calculates the locations around the origin that have a given weight.
            </summary>
            <param name="vehicle"></param>
            <param name="orgin"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Single)">
            <summary>
            Returns true if the given source is at least connected to vertices with at least a given weight.
            </summary>
            <param name="vehicle"></param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.CheckConnectivity(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Single)">
            <summary>
            Returns an array of connectivity check results.
            </summary>
            <param name="vehicle"></param>
            <param name="point"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.ConstructRoute(OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegment{System.Int64},OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint)">
            <summary>
            Converts a linked route to an OsmSharpRoute.
            </summary>
            <param name="vehicle"></param>
            <param name="route"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.ConstructRoute(OsmSharp.Routing.Vehicle,OsmSharp.Routing.Graph.Router.PathSegment{System.Int64},OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint,System.Boolean)">
            <summary>
            Converts a linked route to an OsmSharpRoute.
            </summary>
            <param name="vehicle"></param>
            <param name="route"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Generate(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,OsmSharp.Routing.RouterPoint,System.Int64[],System.Boolean)">
            <summary>
            Generates an osm sharp route from a graph route.
            </summary>
            <param name="vehicle"></param>
            <param name="fromResolved"></param>
            <param name="toResolved"></param>
            <param name="vertices"></param>
            <param name="geometryOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GenerateEntries(OsmSharp.Routing.Vehicle,System.Int64[],System.Boolean)">
            <summary>
            Generates a list of entries.
            </summary>
            <param name="vehicle"></param>
            <param name="vertices"></param>
            <param name="geometryOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetNeighboursUndirectedWithEdges(OsmSharp.Routing.Vehicle,System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns all the edges to the neighbours of the given vertex except the shortest 
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.MatchArc(OsmSharp.Routing.Vehicle,System.Int64,OsmSharp.Math.Geo.Simple.GeoCoordinateSimple[],System.Int64,OsmSharp.Routing.Graph.Router.PathSegment{System.Int64})">
            <summary>
            Tries to match an arc with a given path.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <param name="geoCoordinateSimple"></param>
            <param name="p"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetNeighboursUndirected(System.Int64)">
            <summary>
            Returns all the arcs representing neighbours for the given vertex.
            </summary>
            <param name="vertex1"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetEdgeData(OsmSharp.Routing.Vehicle,System.Int64,System.Int64)">
            <summary>
            Returns the edge data between two neighbouring vertices.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetCoordinate(OsmSharp.Routing.Vehicle,System.Int64)">
            <summary>
            Returns the coordinate of the given vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._routerPoints">
            <summary>
            Holds all resolved points.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Normalize(OsmSharp.Routing.RouterPoint)">
            <summary>
            Normalizes the router point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetRouterPoint(OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.RouterPoint@)">
            <summary>
            Returns a routerpoint for the given location.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetRouterPoint(System.Int64,OsmSharp.Routing.RouterPoint@)">
            <summary>
            Returns a routerpoint for the given resolvedId.
            </summary>
            <param name="resolvedId"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="pointTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="pointTags"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="pointTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="pointTags"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase,System.Boolean)">
            <summary>
            Resolves the given coordinate to the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves the given coordinates to the closest routable points.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Resolves the given coordinates to the closest routable points.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves the given coordinates to the closest routable points.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Resolve(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Routing.IEdgeMatcher,OsmSharp.Collections.Tags.TagsCollectionBase[])">
            <summary>
            Resolves the given coordinates to the closest routable points.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="matcher"></param>
            <param name="matchingTags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Search(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Find the coordinates of the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Search(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Find the coordinates of the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Search(OsmSharp.Routing.Vehicle,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Find the coordinates of the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="coordinate"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.Search(OsmSharp.Routing.Vehicle,System.Single,OsmSharp.Math.Geo.GeoCoordinate,System.Boolean)">
            <summary>
            Find the coordinates of the closest routable point.
            </summary>
            <param name="vehicle"></param>
            <param name="delta"></param>
            <param name="coordinate"></param>
            <param name="verticesOnly"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._nextResolvedId">
            <summary>
            Holds the id of the next resolved point.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetNextResolvedId">
            <summary>
            Returns the next resolved id.
            </summary>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._nextIntermediateId">
            <summary>
            Holds the id of the next intermediate point.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetNextIntermediateId">
            <summary>
            Returns the next intermediate id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.IsIntermediate(System.Int64)">
            <summary>
            Returns true if the given vertex is an intermediate.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouter`1._resolvedGraphs">
            <summary>
            Holds the resolved graphs per used vehicle type.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.GetForProfile(OsmSharp.Routing.Vehicle)">
            <summary>
            Gets/creates a TypedRouterResolvedGraph for the given profile.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.AddResolvedPointExact(OsmSharp.Routing.Vehicle,System.UInt32,System.UInt32,OsmSharp.Math.Geo.GeoCoordinate,`0)">
            <summary>
            Adds a resolved point to the graph.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="resolvedPoint"></param>
            <param name="edgeData"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.AddResolvedPoint(OsmSharp.Routing.Vehicle,System.UInt32,System.UInt32,System.Double,`0)">
            <summary>
            Adds a resolved point to the graph.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="position"></param>
            <param name="edgeData"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.RouteResolvedGraph(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint,System.Nullable{System.Boolean})">
            <summary>
            Calculates all routes from a given resolved point to the routable graph.
            </summary>
            <param name="vehicle"></param>
            <param name="resolvedPoint"></param>
            <param name="backwards"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.RouteResolvedGraph(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Boolean)">
            <summary>
            Calculates all routes from all the given resolved points to the routable graph.
            </summary>
            <param name="vehicle"></param>
            <param name="resolvedPoints"></param>
            <param name="backwards"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.ResolvedShortest(OsmSharp.Routing.Vehicle,System.Int64,System.Int64)">
            <summary>
            Calculates the shortest path between two points in the resolved vertex.
            </summary>
            <param name="vehicle"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouter`1.Interpreter">
            <summary>
            Returns the routing interpreter.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouter`1.Data">
            <summary>
            Returns the data.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouter`1.IsCalculateRangeSupported">
            <summary>
            Returns true if range calculation is supported.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouter`1.ArcEqualityComparer">
            <summary>
            An equality comparer to filter doubles from an arcs-list/array.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.ArcEqualityComparer.Equals(System.Collections.Generic.KeyValuePair{System.UInt32,`0},System.Collections.Generic.KeyValuePair{System.UInt32,`0})">
            <summary>
            Returns true when two edges are the same.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouter`1.ArcEqualityComparer.GetHashCode(System.Collections.Generic.KeyValuePair{System.UInt32,`0})">
            <summary>
            Returns a hashcode for each edge.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouterCHEdge">
            <summary>
            A version of the typedrouter using edges of type CHEdgeData.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterCHEdge.#ctor(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.CH.PreProcessing.CHEdgeData},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Graph.Router.IBasicRouter{OsmSharp.Routing.CH.PreProcessing.CHEdgeData})">
            <summary>
            Creates a new type router using edges of type CHEdgeData.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterCHEdge.SupportsVehicle(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterCHEdge.GetNeighboursUndirected(System.Int64)">
            <summary>
            Returns all the arcs representing neighbours for the given vertex.
            </summary>
            <param name="vertex1"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouterLiveEdge">
            <summary>
            A version of the typedrouter using edges of type LiveEdge.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterLiveEdge.#ctor(OsmSharp.Routing.Graph.Router.IBasicRouterDataSource{OsmSharp.Routing.Osm.Graphs.LiveEdge},OsmSharp.Routing.Interpreter.IRoutingInterpreter,OsmSharp.Routing.Graph.Router.IBasicRouter{OsmSharp.Routing.Osm.Graphs.LiveEdge})">
            <summary>
            Creates a new type router using edges of type LiveEdge.
            </summary>
            <param name="graph"></param>
            <param name="interpreter"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterLiveEdge.SupportsVehicle(OsmSharp.Routing.Vehicle)">
            <summary>
            Returns true if the given vehicle is supported.
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouterResolvedGraph">
            <summary>
            An implementation of an in-memory dynamic graph.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Routers.TypedRouterResolvedGraph._vertices">
            <summary>
            Holds all graph data.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.#ctor">
            <summary>
            Creates a new in-memory graph.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.AddVertex(System.Int64,System.Single,System.Single)">
            <summary>
            Adds a new vertex.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.GetVertex(System.Int64,System.Single@,System.Single@)">
            <summary>
            Returns the information in the current vertex.
            </summary>
            <param name="id"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.GetVertices">
            <summary>
            Returns an enumerable of all vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.AddArc(System.Int64,System.Int64,OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge)">
            <summary>
            Adds and arc to an existing vertex.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="data"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.DeleteArc(System.Int64,System.Int64)">
            <summary>
            Removes all arcs starting at from ending at to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.GetArcs(System.Int64)">
            <summary>
            Returns all arcs starting at the given vertex.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphVertex">
            <summary>
            Represents a simple vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphVertex.Id">
            <summary>
            The id of this vertex.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphVertex.Latitude">
            <summary>
            Holds the latitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphVertex.Longitude">
            <summary>
            Holds longitude.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphVertex.Arcs">
            <summary>
            Holds an array of edges starting at this vertex.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge">
            <summary>
            Represents a resolved edge.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates a new resolved edge.
            </summary>
            <param name="tags"></param>
            <param name="forward"></param>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.Equals(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.EqualsGeometrically(OsmSharp.Routing.Graph.IDynamicGraphEdgeData)">
            <summary>
            Returns true if the other edge represents the same geographical information than this edge.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.Tags">
            <summary>
            Returns the tags identifier.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.Forward">
            <summary>
            Gets/sets the forward flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.IsVirtual">
            <summary>
            These edge can always be resolved on.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.RepresentsNeighbourRelations">
            <summary>
            Returns true if this edge represents a neighbour-relation.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Routers.TypedRouterResolvedGraph.RouterResolvedGraphEdge.Coordinates">
            <summary>
            Gets or sets intermediate coordinates (if any).
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.TSP.RouterTSP">
            <summary>
            Router that calculates TSP solutions.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.#ctor">
            <summary>
            Creates a new TSP router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.CalculateTSP(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[],System.Int32,System.Boolean)">
            <summary>
            Calculates a solution to the ATSP.
            </summary>
            <param name="weights">The weights between all the customers.</param>
            <param name="locations">The locations of all customers.</param>
            <param name="first">The first customer.</param>
            <param name="is_round">Return to the first customer or not.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.CalculateTSP(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[],System.Int32,System.Int32)">
            <summary>
            Calculates a solution to the ATSP.
            </summary>
            <param name="weights">The weights between all the customers.</param>
            <param name="locations">The locations of all customers.</param>
            <param name="first">The index of the point to start from.</param>
            <param name="last">The index of the point to end at.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.CalculateTSP(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[],System.Boolean)">
            <summary>
            Calculates a solution to the ATSP.
            </summary>
            <param name="weights">The weights between all the customers.</param>
            <param name="locations">The locations of all customers.</param>
            <param name="is_round">Make the route return to the start-point or not.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.CalculateTSP(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Calculates a solution to the ATSP.
            </summary>
            <param name="weights">The weights between all the customers.</param>
            <param name="locations">The locations of all customers.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.GenerateProblem(System.Double[][],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Generates a problem definition.
            </summary>
            <param name="weights"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="is_round"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.DoCreateSolver(System.Int32)">
            <summary>
            Generates a solver in function of the size of the problem.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.solver_IntermidiateResult(System.Int32[])">
            <summary>
            Raise intermidiate result event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSP.RaiseIntermidiateResult(System.Int32[])">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="E:OsmSharp.Routing.TSP.RouterTSP.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.TSP.RouterTSP.IntermidiateDelegate">
            <summary>
            Delegate to pass on an intermidiate solution.
            </summary>
            <param name="result"></param>
        </member>
        <member name="F:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic._population">
            <summary>
            Holds the population count.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic._stagnation">
            <summary>
            Holds the stagnation count.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic.#ctor">
            <summary>
            Creates a new TSP router;
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new TSP router;
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.Genetic.RouterTSPAEXGenetic.DoCreateSolver(System.Int32)">
            <summary>
            Creates a genetic solver.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.TSP.Genetic.RouterTSPGenetic">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.Genetic.RouterTSPGenetic.#ctor">
            <summary>
            Creates a new TSP router;
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.Genetic.RouterTSPGenetic.DoCreateSolver(System.Int32)">
            <summary>
            Creates a genetic solver.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.TSP.RandomizedArbitraryInsertion.RouteTSPRAI">
            <summary>
            A TSP router using a genetic algorithm.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RandomizedArbitraryInsertion.RouteTSPRAI.#ctor">
            <summary>
            Creates a new TSP router;
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RandomizedArbitraryInsertion.RouteTSPRAI.DoCreateSolver(System.Int32)">
            <summary>
            Creates a solver.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.TSP.RouterTSPWrapper`1">
            <summary>
            A wrapper around the RouterVRP class.
            </summary>
            <typeparam name="TRouterTSPType"></typeparam>
        </member>
        <member name="F:OsmSharp.Routing.TSP.RouterTSPWrapper`1._router">
            <summary>
            Holds the router.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.TSP.RouterTSPWrapper`1._routerTSP">
            <summary>
            Holds the router TSP.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.TSP.RouterTSPWrapper`1._interpreter">
            <summary>
            Interpreter for the routing network.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.#ctor(`0,OsmSharp.Routing.Router)">
            <summary>
            Creates a new RouterTSPWrapper.
            </summary>
            <param name="routerTSP"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.#ctor(`0,OsmSharp.Routing.Router,OsmSharp.Routing.Interpreter.IRoutingInterpreter)">
            <summary>
            Creates a new RouterTSPWrapper.
            </summary>
            <param name="routerTSP"></param>
            <param name="router"></param>
            <param name="interpreter"></param>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CalculateManyToManyWeight(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates a weight matrix for the given array of points.
            </summary>
            <param name="vehicle">The vehicle type.</param>
            <param name="points">The points to travel along.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CalculateTSP(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Int32,System.Boolean)">
            <summary>
            Calculates the shortest route along all given points starting and ending at the given points.
            </summary>
            <param name="vehicle">The vehicle type.</param>
            <param name="points">The points to travel along.</param>
            <param name="first">The index of the point to start from.</param>
            <param name="isRound">Return back to the first point or not.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CalculateTSP(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Int32,System.Int32)">
            <summary>
            Calculates the shortest route along all given points starting and ending at the given points.
            </summary>
            <param name="vehicle">The vehicle type.</param>
            <param name="points">The points to travel along.</param>
            <param name="first">The index of the point to start from.</param>
            <param name="last">The index of the point to end at.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CalculateTSP(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Boolean)">
            <summary>
            Calculates the shortest route along all given points.
            </summary>
            <param name="vehicle">The vehicle type.</param>
            <param name="points">The points to travel along.</param>
            <param name="isRound">Make the route return to the start-point or not.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CalculateTSP(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[])">
            <summary>
            Calculates the shortest route along all given points returning back to the first.
            </summary>
            <param name="vehicle">The vehicle type.</param>
            <param name="points">The points to travel along.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.BuildRoute(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],OsmSharp.Math.VRP.Core.Routes.IRoute,System.Double)">
            <summary>
            Builds an OsmSharRoute.
            </summary>
            <param name="vehicle"></param>
            <param name="points"></param>
            <param name="tspSolution"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.TSP.RouterTSPWrapper`1.RaiseIntermidiateResult(OsmSharp.Routing.Route,System.Double)">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
            <param name="weight"></param>
        </member>
        <member name="E:OsmSharp.Routing.TSP.RouterTSPWrapper`1.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.TSP.RouterTSPWrapper`1.IntermidiateDelegate">
            <summary>
            Delegate to pass on an intermidiate solution.
            </summary>
            <param name="result"></param>
            <param name="weight"></param>
        </member>
        <member name="T:OsmSharp.Routing.Vehicle">
            <summary>
                Vehicle class contains routing info
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.Car">
            <summary>
            Default Car
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.Pedestrian">
            <summary>
            Default Pedestrian
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.Bicycle">
            <summary>
            Default Bicycle
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.Moped">
            <summary>
            Default Moped
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.MotorCycle">
            <summary>
            Default MotorCycle
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.SmallTruck">
            <summary>
            Default SmallTruck
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.BigTruck">
            <summary>
            Default BigTruck
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.Bus">
            <summary>
            Default BigTruck
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.RegisterVehicles">
            <summary>
            Registers all default vehicles.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.VehiclesByName">
            <summary>
            Holds the vehicles by name.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.#ctor">
            <summary>
            Creates a new vehicle.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.Register">
            <summary>
            Registers this vehicle by name.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.GetByUniqueName(System.String)">
            <summary>
            Returns the vehicle with the given name.
            </summary>
            <param name="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.Vehicle.AccessibleTags">
            <summary>
            Contains Accessiblity Rules
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.TryGetHighwayType(OsmSharp.Collections.Tags.TagsCollectionBase,System.String@)">
            <summary>
            Trys to return the highwaytype from the tags
            </summary>
            <param name="tags"></param>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.CanTraverse(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge with the given tags can be traversed by the vehicle.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.MaxSpeedAllowed(System.String)">
            <summary>
            Returns the Max Speed for the highwaytype in Km/h
            </summary>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.MaxSpeed">
            <summary>
            Returns the max speed this vehicle can handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.MaxSpeedAllowed(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns the maximum speed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.ProbableSpeed(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Estimates the probable speed of this vehicle on a way with the given tags.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.IsEqualFor(OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edges with the given properties are equal for the vehicle.
            </summary>
            <param name="tags1"></param>
            <param name="tags2"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.Weight(OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Returns the weight between two points on an edge with the given tags for the vehicle.
            </summary>
            <param name="tags"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.Weight(OsmSharp.Collections.Tags.TagsCollectionBase,OsmSharp.Math.Geo.GeoCoordinate,OsmSharp.Math.Geo.GeoCoordinate[],OsmSharp.Math.Geo.GeoCoordinate)">
            <summary>
            Returns the weight between points on an edge with the given tags for the vehicle.
            </summary>
            <param name="tags"></param>
            <param name="from"></param>
            <param name="intermediate"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.Weight(OsmSharp.Collections.Tags.TagsCollectionBase,System.Single)">
            <summary>
            Returns the weight between points based on the tags and distance.
            </summary>
            <param name="tags"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.IsOneWay(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge is one way forward, false if backward, null if bidirectional.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.GetName(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns the name of a given way.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Vehicle.IsVehicleAllowed(OsmSharp.Collections.Tags.TagsCollectionBase,System.String)">
            <summary>
            Returns true if the vehicle is allowed on the way represented by these tags
            </summary>
            <param name="tags"></param>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Vehicle.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Pedestrian">
            <summary>
            Represents a pedestrian
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Pedestrian.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Pedestrian.IsVehicleAllowed(OsmSharp.Collections.Tags.TagsCollectionBase,System.String)">
            <summary>
            Returns true if the vehicle is allowed on the way represented by these tags
            </summary>
            <param name="tags"></param>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Pedestrian.MaxSpeedAllowed(System.String)">
            <summary>
            Returns the Max Speed for the highwaytype in Km/h.
            
            This does not take into account how fast this vehicle can go just the max possible speed.
            </summary>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Pedestrian.IsOneWay(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
                Returns true if the edge is one way forward, false if backward, null if bidirectional.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Pedestrian.MaxSpeed">
            <summary>
            Returns the maximum possible speed this vehicle can achieve.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Pedestrian.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Bicycle">
            <summary>
            Represents a bicycle
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Bicycle.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Bicycle.IsVehicleAllowed(OsmSharp.Collections.Tags.TagsCollectionBase,System.String)">
            <summary>
            Returns true if the vehicle is allowed on the way represented by these tags
            </summary>
            <param name="tags"></param>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Bicycle.MaxSpeedAllowed(System.String)">
            <summary>
            Returns the Max Speed for the highwaytype in Km/h.
            
            This does not take into account how fast this vehicle can go just the max possible speed.
            </summary>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Bicycle.IsOneWay(OsmSharp.Collections.Tags.TagsCollectionBase)">
            <summary>
            Returns true if the edge is one way forward, false if backward, null if bidirectional.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.Bicycle.MaxSpeed">
            <summary>
            Returns the maximum possible speed this vehicle can achieve.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Bicycle.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.MotorVehicle">
            <summary>
            Represents a MotorVehicle
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.MotorVehicle.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.MotorVehicle.IsVehicleAllowed(OsmSharp.Collections.Tags.TagsCollectionBase,System.String)">
            <summary>
            Returns true if the vehicle is allowed on the way represented by these tags
            </summary>
            <param name="tags"></param>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.MotorVehicle.MaxSpeedAllowed(System.String)">
            <summary>
            Returns the Max Speed for the highwaytype in Km/h.
            
            This does not take into account how fast this vehicle can go just the max possible speed.
            </summary>
            <param name="highwayType"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.MotorVehicle.MaxSpeed">
            <summary>
            Returns the maximum possible speed this vehicle can achieve.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.Moped">
            <summary>
            Represents a moped
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Moped.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.Moped.MaxSpeed">
            <summary>
            Returns the maximum possible speed this vehicle can achieve.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.Moped.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.MotorCycle">
            <summary>
            Represents a MotorCycle
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.MotorCycle.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Car">
            <summary>
            Represents a Car
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Car.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.SmallTruck">
            <summary>
            Represents a SmallTruck
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.SmallTruck.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.BigTruck">
            <summary>
            Represents a BigTruck
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.BigTruck.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.Bus">
            <summary>
            Represents a Bus
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.Bus.UniqueName">
            <summary>
            Returns a unique name this vehicle type.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.MTSP.RouterMTSP">
            <summary>
            Class to solve for a specific class of VRP problems: Multiple Travelling Salesmen.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.RouterVRP">
            <summary>
            Base class for all the VRP solvers.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRP.#ctor">
            <summary>
            Creates a new VRP router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRP.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRP.RaiseIntermidiateResult(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:OsmSharp.Routing.VRP.RouterVRP.Name">
            <summary>
            Returns the name of this router.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.VRP.RouterVRP.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.RouterVRP.SolutionDelegate">
            <summary>
            Delegate to pass on an array of routes.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.MTSP.RouterMTSP.#ctor">
            <summary>
            Creates an MTSP Router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.MTSP.RouterMTSP.CalculateMTSP(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Calculates a number of routes to travel on along the given point(s) as efficiently as possible.
            </summary>
            <param name="weights">The weights between all customer pairs.</param>
            <param name="locations">The location of all customers.</param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.MTSP.RouterMTSP.CalculateMTSP(System.Double[][])">
            <summary>
            Calculates the actual MTSP solution.
            </summary>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolver">
            <summary>
            Solves the maxtime problem just using cheapest insertion.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime">
            <summary>
            Class to solve VRP problems that have no depot but min-max time constraints on routes.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.RouterNoDepot">
            <summary>
            Class to solve for a specific class of VRP problems: VRP problems with any depot.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.RouterNoDepot.#ctor">
            <summary>
            Creates a VRP router without a depot.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.RouterNoDepot.CalculateNoDepot(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Calculates this No-Depot VRP.
            </summary>
            <param name="weights"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeSolver">
            <summary>
            Represents an abstraction of a max time solver.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeSolver.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Solves the max time problem.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeSolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second)">
            <summary>
            Creates a new min max VRP router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.CalculateNoDepot(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Calculates the No-depot VRP solution.
            </summary>
            <param name="weights"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.CalculateBox(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates a bounding box.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.Overlaps(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Math.VRP.Core.Routes.IRoute,OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Returns true if the routes overlap.
            </summary>
            <param name="problem"></param>
            <param name="route1"></param>
            <param name="route2"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime._locations">
            <summary>
            Keeps a local copy of the current calculation points.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.DoCalculation(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,System.Collections.Generic.ICollection{System.Int32},OsmSharp.Units.Time.Second)">
            <summary>
            Implements the actual logic.
            </summary>
            <param name="problem"></param>
            <param name="customers"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executing a solver function.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.OsmSharp#Routing#VRP#NoDepot#MaxTime#IMaxTimeSolver#Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Implements the solve function of the IMaxTimeSolver interface
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.Max">
            <summary>
            Returns the maximum time a route is allow to take.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime.DeliveryTime">
            <summary>
            The average time a delivery taks.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolver.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second)">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolver.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements">
            <summary>
            Executes a cheapest insertion procedures with improvements following VND strategy.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._k">
            <summary>
            The amount of customers to place before applying local improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._delta_percentage">
            <summary>
            The percentage bound of space to leave for future improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._intra_improvements">
            <summary>
            Holds the intra-route improvements;
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._inter_improvements">
            <summary>
            Holds the inter-route improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._use_seed_cost">
            <summary>
            Flag to configure seed costs.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._use_seed">
            <summary>
            Flag to use seeding heuristic or not.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._threshold_percentage">
            <summary>
            The threshold percentage.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._lambda">
            <summary>
            The lambda.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Single,System.Boolean,System.Single,System.Boolean,System.Single)">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="k"></param>
            <param name="delta_percentage"></param>
            <param name="use_seed_cost"></param>
            <param name="threshold_precentage"></param>
            <param name="use_seed"></param>
            <param name="lambda"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Single,System.Boolean,System.Single,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="k"></param>
            <param name="delta_percentage"></param>
            <param name="use_seed_cost"></param>
            <param name="threshold_precentage"></param>
            <param name="use_seed"></param>
            <param name="lambda"></param>
            <param name="use_improvements"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Single,System.Boolean,System.Single,System.Boolean,System.Single,System.Collections.Generic.List{OsmSharp.Math.TSP.IImprovement},System.Collections.Generic.List{OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.IInterImprovement})">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="k"></param>
            <param name="delta_percentage"></param>
            <param name="use_seed_cost"></param>
            <param name="threshold_precentage"></param>
            <param name="use_seed"></param>
            <param name="lambda"></param>
            <param name="intra_improvements"></param>
            <param name="inter_improvements"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.SelectSeed(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects a new seed customer.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="solution"></param>
            <param name="customers"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.ImproveIntraRoute(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Double)">
            <summary>
            Apply some improvements within one route.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="current_weight"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.ImproveInterRoute(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Apply some improvements between the given routes and returns the resulting weight.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds">
            <summary>
            Solves the max time problem using seeded cheapest insertion.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds._seed_selector">
            <summary>
            Holds the seed selector.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds._k">
            <summary>
            Holds the number of routes.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32)">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="k"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithSeeds.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness">
            <summary>
            Fitness representation.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.CompareTo(System.Object)">
            <summary>
            Compares this fitness to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.ToString">
            <summary>
            Returns a description of the fitness.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.ActualFitness">
            <summary>
            The actual fitness value.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.MaxWeight">
            <summary>
            The max weight.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.Weights">
            <summary>
            The weights.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.Vehicles">
            <summary>
            The vehicle count.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.TotalTime">
            <summary>
            The total time.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness.TotalAboveMax">
            <summary>
            Returns the total above max.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.RandomBestPlacement">
            <summary>
            Best-placement generator based on a random first customer for each route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.RandomBestPlacement.Generate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            Generates individuals based on a random first customer for each route.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.RandomGeneration">
            <summary>
            Best-placement generator based on a random first customer for each route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.RandomGeneration.Generate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            Generates individuals based on a random first customer for each route.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.SolverGenerationOperation">
            <summary>
            Generates individuals based on another solver.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.SolverGenerationOperation._solver">
            <summary>
            Holds the solver.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.SolverGenerationOperation.#ctor(OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeSolver)">
            <summary>
            Creates a new solver generation operation.
            </summary>
            <param name="solver"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.SolverGenerationOperation.Generate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            Generates individuals based on a random first customer for each route.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Generation.SolverGenerationOperation.Name">
            <summary>
            Returns the name of this operation.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.RoutePartExchangeMutation">
            <summary>
            Mutation operation exchanging a part of some route to a part of another route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.RoutePartExchangeMutation.Mutate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness},OsmSharp.Math.AI.Genetic.Individual{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            Does the mutation.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.ThreeOptMutation.Mutate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness},OsmSharp.Math.AI.Genetic.Individual{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            "Mutates" a given individual by executing a local search 3-Opt operation.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.VehicleMutation">
            <summary>
            Mutation operation exchanging a part of some route to a part of another route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.VehicleMutation.Mutate(OsmSharp.Math.AI.Genetic.Solvers.Solver{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness},OsmSharp.Math.AI.Genetic.Individual{OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Fitness})">
            <summary>
            Does the mutation.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.Mutation.VehicleMutation.Name">
            <summary>
            Returns the name of this mutation.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple">
            <summary>
            Calculates VRP's without a depot with min max time constraints per route using genetic algorithms.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second)">
            <summary>
            Creates a new genetic min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new genetic min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="population"></param>
            <param name="stagnation"></param>
            <param name="elitism_percentage"></param>
            <param name="cross_percentage"></param>
            <param name="mutation_percentage"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new genetic min max no depot vrp router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="population"></param>
            <param name="stagnation"></param>
            <param name="elitism_percentage"></param>
            <param name="cross_percentage"></param>
            <param name="mutation_percentage"></param>
            <param name="probabilities"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.Genetic.RouterGeneticSimple.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeImprovement">
            <summary>
            Represents an improvement heurstics for the MaxTimeProblem.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.IMaxTimeImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Single@)">
            <summary>
            Tries to improve the given solution given the given problem.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="difference"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement">
            <summary>
            Applies inter-improvements by exchanging parts of the route(s).
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.IInterImprovement">
            <summary>
            Abstract an inter-improvement algorithm that tries to exhange edges/customers between two routes to obtain a better result.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.IInterImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns true if there was an improvement.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.IInterImprovement.Name">
            <summary>
            Returns the name of this inter-improvement algorithm.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.IInterImprovement.IsSymmetric">
            <summary>
            Returns true if this inter-improvement is symmetric.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Applies inter-improvements by exchanging parts of the route(s).
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.ExchangeInterImprovement">
            <summary>
            Applies inter-improvements by exchanging customers.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.ExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Applies inter-improvements by exchanging customers.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.ExchangeInterImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.ExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement">
            <summary>
            Tries to relocate customers using the source the same as the CrossExchange but places customers using cheapest insertion.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries to relocate customers using the source the same as the CrossExchange but places customers using cheapest insertion.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.Name">
            <summary>
            Returns the name of this improvment.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement">
            <summary>
            Relocate heurstic.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement.Improve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries to improve the existing routes by re-inserting a customer from one route into another.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement.RelocateFromTo(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries a relocation of the customers in route1 to route2.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement.ConsiderCustomer(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Considers one customer for relocation.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="previous"></param>
            <param name="current"></param>
            <param name="next"></param>
            <param name="route_weight"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.InterImprovements.RelocateImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator">
            <summary>
            Calculates fitness
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator._problem">
            <summary>
            The problem.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.#ctor(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Creates a new maxtime calculator.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.CalculateCumulWeights(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the cumulative weights of a route indexed by customer.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.CalculateOneRouteIncrease(System.Double,System.Double)">
            <summary>
            Calculates the new weight when adding one customer to one route.
            </summary>
            <param name="weight"></param>
            <param name="difference"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.CalculateOneRoute(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the weight of one route.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.Calculate(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the tot weight of one solution.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeCalculator.DeliveryTime">
            <summary>
            Returns the delivery time.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem">
            <summary>
            Represents a max time problem.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem._weights">
            <summary>
            Holds the weights.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.#ctor(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Double,System.Double)">
            <summary>
            Creates a new max time problem.
            </summary>
            <param name="weights"></param>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="cost_per_second"></param>
            <param name="cost_per_vehicle"></param>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem._customer_positions">
            <summary>
            Holds all the customer positions.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Weight(System.Int32,System.Int32)">
            <summary>
            Returns the weight between two customers.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem._penalizations">
            <summary>
            Holds al penalizations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Penalize(OsmSharp.Math.VRP.Core.Routes.Edge,System.Double)">
            <summary>
            Penalizes an edge.
            </summary>
            <param name="edge"></param>
            <param name="delta"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.ResetPenalizations">
            <summary>
            Undoes all penalizations.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem._neighbours">
            <summary>
            Keeps the nearest neighbour list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Get10NearestNeighbours(System.Int32)">
            <summary>
            Generate the nearest neighbour list.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Time(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the total time.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Time(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the time of one route.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Time(System.Double,System.Int32)">
            <summary>
            Calculates the time of one route given the travel time and the amount of customers.
            </summary>
            <param name="travel_time"></param>
            <param name="customers"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.TimeCumul(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the cumulative times of a route indexed by customer.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Weight(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the total weight.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.WeightDifferenceAfterMerge(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Double)">
            <summary>
            Calculates the weight difference after merging two routes given the cost to merge them.
            </summary>
            <param name="solution"></param>
            <param name="merge_costs"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.CustomerPositions">
            <summary>
            Returns a list of customers.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.MaxTimeCalculator">
            <summary>
            The max time calculator.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Customers">
            <summary>
            Returns a list of customers.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Max">
            <summary>
            The maximum time.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.DeliveryTime">
            <summary>
            The delivery time.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Size">
            <summary>
            The size of the problem.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Weights">
            <summary>
            The weights.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Symmetric">
            <summary>
            Returns true if the problem is symmetric.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.Euclidean">
            <summary>
            Returns true if the problem is euclidean.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem.WeightMatrix">
            <summary>
            The weight matrix.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeRouterWrapper">
            <summary>
            A wrapper for all the RouterMaxTime implementations.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.RouterVRPWrapper`1">
            <summary>
            A wrapper around the RouterVRP class.
            </summary>
            <typeparam name="TRouterVRPType"></typeparam>
        </member>
        <member name="F:OsmSharp.Routing.VRP.RouterVRPWrapper`1._routerVRP">
            <summary>
            Holds the router VRP type.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.RouterVRPWrapper`1._router">
            <summary>
            Holds the the router.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRPWrapper`1.#ctor(`0,OsmSharp.Routing.Router)">
            <summary>
            Creates a router VRP wrapper.
            </summary>
            <param name="routerVRP"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRPWrapper`1.ConvertSolution(OsmSharp.Routing.Vehicle,System.Int32[][],OsmSharp.Routing.RouterPoint[])">
            <summary>
            Converts a simple VRP solution into a solution containing the actual routes.
            </summary>
            <param name="vehicle"></param>
            <param name="solution"></param>
            <param name="points"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRPWrapper`1._router_vrp_IntermidiateResult(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Handles events from the VRP solver and converts them to real results.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRPWrapper`1.CanRaiseIntermidiateResult">
            <summary>
            Returns true when the event has to be raised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.RouterVRPWrapper`1.RaiseIntermidiateResult(OsmSharp.Routing.Route[])">
            <summary>
            Raises the intermidiate results event.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:OsmSharp.Routing.VRP.RouterVRPWrapper`1.RouterVRP">
            <summary>
            Returns the VRP solver of this wrapper.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.RouterVRPWrapper`1.Router">
            <summary>
            Returns the router.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.RouterVRPWrapper`1.Name">
            <summary>
            Returns the name of this router.
            </summary>
        </member>
        <member name="E:OsmSharp.Routing.VRP.RouterVRPWrapper`1.IntermidiateResult">
            <summary>
            Raised when an intermidiate result is available.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.RouterVRPWrapper`1.OsmSharpRoutesDelegate">
            <summary>
            Delegate to pass on an array of routes.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeRouterWrapper.#ctor(OsmSharp.Routing.VRP.NoDepot.MaxTime.RouterMaxTime,OsmSharp.Routing.Router)">
            <summary>
            Creates a new RouterMaxTime wrapper.
            </summary>
            <param name="routerVrp"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeRouterWrapper.CalculateNoDepot(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Double[][])">
            <summary>
            Calculates the solution to the No-depot DVRP starting from the raw data.
            </summary>
            <param name="vehicle"></param>
            <param name="points"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution">
            <summary>
            Represents a solution to the MaxTime problem.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new solution in the form of a DynamicAsymmetricMultiRoute.
            </summary>
            <param name="size"></param>
            <param name="is_round"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution.#ctor(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Creates a new solution based on an existing one.
            </summary>
            <param name="first"></param>
            <param name="next_array"></param>
            <param name="is_round"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution.Clone">
            <summary>
            Clones this solution.
            </summary>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution._weights">
            <summary>
            Keeps all the weights of the routes.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution.RemoveWeight(System.Int32)">
            <summary>
            Removes the weight for the given route.
            </summary>
            <param name="route_idx"></param>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution.Item(System.Int32)">
            <summary>
            Gets/sets the weight of the route at the given index.
            </summary>
            <param name="route_idx"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver">
            <summary>
            A heuristic solver based on a construction heuristic inspired on the Clarke-Wright savings heuristic.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second)">
            <summary>
            Creates a solver based on a construction heuristic.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Calculates a solution.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.TryMerge(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Try and merge route2 into route1.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult">
            <summary>
            Represents a merge result.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.Weight">
            <summary>
            The decrease in weight.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.RouteTargetId">
            <summary>
            The target route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.RouteSourceId">
            <summary>
            The source route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.CustomerTargetSource">
            <summary>
            The customer source in the target route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.CustomerSourceSource">
            <summary>
            The customer source in the source route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.SavingsHeuristics.SavingsHeuristicSolver.MergeResult.CustomerSourceTarget">
            <summary>
            The customer target in the source route.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPPlacementSolver">
            <summary>
            A solver bases on TSP placement.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPPlacementSolver.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,OsmSharp.Math.TSP.ISolver)">
            <summary>
            Creates a new TSP placement solver.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="tsp_solver"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPPlacementSolver.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Creates a new TSP placement solver.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="tsp_solution"></param>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPPlacementSolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem">
            <summary>
            Represents the equivalent TSP problem related to this VRP.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.#ctor(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Creates a new TSP problem.
            </summary>
            <param name="vrp"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Weight(System.Int32,System.Int32)">
            <summary>
            Returns the weight between two customers.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem._neighbours">
            <summary>
            Keeps the nearest neighbour list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Get10NearestNeighbours(System.Int32)">
            <summary>
            Generate the nearest neighbour list.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Size">
            <summary>
            Returns the size.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.First">
            <summary>
            Returns the first if any.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Last">
            <summary>
            Returns the last if any.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Symmetric">
            <summary>
            Returns the symmetric flag.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.Euclidean">
            <summary>
            Returns true if the problem is euclidean.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.TSPPlacement.TSPProblem.WeightMatrix">
            <summary>
            Returns the weight matrix.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS">
            <summary>
            Uses a Variable Neighbourhood Search technique.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS._lambda">
            <summary>
            Holds the lambda value.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS._thresholdPercentage">
            <summary>
            The threshold percentage.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS.#ctor(OsmSharp.Routing.Router,OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Guided Variable Neighbourhood Search solver.
            </summary>
            <param name="router"></param>
            <param name="max"></param>
            <param name="deliveryTime"></param>
            <param name="thresholdPrecentage"></param>
            <param name="lambda"></param>
            <param name="sigma"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS.Solve(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS._intra_improvements">
            <summary>
            Holds the intra-route improvements;
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS._inter_improvements">
            <summary>
            Holds the inter-route improvements.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS.ImproveIntraRoute(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Double)">
            <summary>
            Apply some improvements within one route.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="currentWeight"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS.ImproveInterRoute(OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.NoDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Apply some improvements between the given routes and returns the resulting weight.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1Idx"></param>
            <param name="route2Idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.NoDepot.MaxTime.VNS.GuidedVNS.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements">
            <summary>
            Executes a cheapest insertion procedures with improvements following VND strategy.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime">
            <summary>
            Class to solve VRP problems that have no depot but min-max time constraints on routes.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.RouterDepot">
            <summary>
            Class to solve for a specific class of VRP problems: VRP problems with multi depot.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.RouterDepot.#ctor">
            <summary>
            Creates a VRP router without a depot.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.RouterDepot.CalculateDepot(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Calculates this VRP No Depot.
            </summary>
            <param name="weights">The weights between all customer pairs incuding the depot.</param>
            <param name="locations">The location between of customers and the depot.</param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.IMaxTimeSolver">
            <summary>
            Represents an abstraction of a max time solver.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.IMaxTimeSolver.Solve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Solves the max time problem.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.IMaxTimeSolver.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.#ctor(OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second)">
            <summary>
            Creates a new min max VRP router.
            </summary>
            <param name="max"></param>
            <param name="delivery_time"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.CalculateDepot(System.Double[][],OsmSharp.Math.Geo.GeoCoordinate[])">
            <summary>
            Caculates the DVRP.
            </summary>
            <param name="weights"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.CalculateBox(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates a bounding box.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.Overlaps(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Math.VRP.Core.Routes.IRoute,OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Returns true if the routes overlap.
            </summary>
            <param name="problem"></param>
            <param name="route1"></param>
            <param name="route2"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime._locations">
            <summary>
            Keeps a local copy of the current calculation points.
            
            TODO: find a better solution to make this thread-safe!
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.DoCalculation(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,System.Collections.Generic.ICollection{System.Int32},OsmSharp.Units.Time.Second)">
            <summary>
            Implements the actual logic.
            </summary>
            <param name="problem"></param>
            <param name="customers"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.Solve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executing a solver function.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.OsmSharp#Routing#VRP#WithDepot#MaxTime#IMaxTimeSolver#Solve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Implements the solve function of the IMaxTimeSolver interface
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.Max">
            <summary>
            Returns the maximum time a route is allow to take.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime.DeliveryTime">
            <summary>
            The average time a delivery taks.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._k">
            <summary>
            The amount of customers to place before applying local improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._deltaPercentage">
            <summary>
            The percentage bound of space to leave for future improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._intraImprovements">
            <summary>
            Holds the intra-route improvements;
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._interImprovements">
            <summary>
            Holds the inter-route improvements.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements._useSeedCost">
            <summary>
            Flag to configure seed costs.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.#ctor(OsmSharp.Routing.Router,OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Int32,System.Single,System.Boolean,System.Single)">
            <summary>
            Creates a new best placement min max no depot vrp router.
            </summary>
            <param name="router"></param>
            <param name="max"></param>
            <param name="deliveryTime"></param>
            <param name="k"></param>
            <param name="deltaPercentage"></param>
            <param name="useSeedCost"></param>
            <param name="thresholdPrecentage"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.Solve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.SelectSeed(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects a new seed customer.
            </summary>
            <param name="problem"></param>
            <param name="calculator"></param>
            <param name="solution"></param>
            <param name="customers"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.ImproveIntraRoute(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Double)">
            <summary>
            Apply some improvements within one route.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="currentWeight"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.ImproveInterRoute(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Apply some improvements between the given routes and returns the resulting weight.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1Idx"></param>
            <param name="route2Idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.CheapestInsertion.CheapestInsertionSolverWithImprovements.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness">
            <summary>
            A fitness representation.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.CompareTo(System.Object)">
            <summary>
            Compares this fitness to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.ToString">
            <summary>
            Returns a description of this fitness.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.ActualFitness">
            <summary>
            The actual fitness value.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.MaxWeight">
            <summary>
            The maximum weight.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.Weights">
            <summary>
            The weights of each route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.Vehicles">
            <summary>
            The vehicles.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.TotalTime">
            <summary>
            The total time.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness.Range">
            <summary>
            Returns the range.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.Genetic.Generation.RandomBestPlacement">
            <summary>
            Best-placement generator based on a random first customer for each route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.Genetic.Generation.RandomBestPlacement.Generate(OsmSharp.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Genome},OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem,OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness})">
            <summary>
            Generates individuals based on a random first customer for each route.
            </summary>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Genome.IsValid">
            <summary>
            Returns true if this route is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.Genetic.Mutation.RoutePartExchangeMutation">
            <summary>
            Mutation operation exchanging a part of some route to a part of another route.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.Genetic.Mutation.RoutePartExchangeMutation.Mutate(OsmSharp.Math.AI.Genetic.Solvers.Solver{System.Collections.Generic.List{OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Genome},OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem,OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness},OsmSharp.Math.AI.Genetic.Individual{System.Collections.Generic.List{OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Genome},OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem,OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Fitness})">
            <summary>
            Does the mutation.
            </summary>
            <param name="solver"></param>
            <param name="mutating"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem">
            <summary>
            The problem description for the genetic algorithm.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem._neighbours">
            <summary>
            Keeps the nearest neighbour list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MinimaxTime.Genetic.Problem.Get10NearestNeighbours(System.Int32)">
            <summary>
            Generate the nearest neighbour list.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement">
            <summary>
            Applies inter-improvements by exchanging parts of the route(s).
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.IInterImprovement">
            <summary>
            Abstract an inter-improvement algorithm that tries to exhange edges/customers between two routes to obtain a better result.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.IInterImprovement.Improve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns true if there was an improvement.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <param name="route1_idx"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.IInterImprovement.Name">
            <summary>
            Returns the name of this inter-improvement algorithm.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.IInterImprovement.IsSymmetric">
            <summary>
            Returns true if this inter-improvement is symmetric.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Applies inter-improvements by exchanging parts of the route(s).
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.CrossExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.ExchangeInterImprovement">
            <summary>
            Applies inter-improvements by exchanging customers.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.ExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Applies inter-improvements by exchanging customers.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.ExchangeInterImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.ExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement">
            <summary>
            Tries to relocate customers using the source the same as the CrossExchange but places customers using cheapest insertion.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.Improve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries to relocate customers using the source the same as the CrossExchange but places customers using cheapest insertion.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.Name">
            <summary>
            Returns the name of this improvment.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateExchangeInterImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement">
            <summary>
            Relocate heurstic.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement.Improve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries to improve the existing routes by re-inserting a customer from one route into another.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement.RelocateFromTo(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Tries a relocation of the customers in route1 to route2.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route1_idx"></param>
            <param name="route2_idx"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement.ConsiderCustomer(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Considers one customer for relocation.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="previous"></param>
            <param name="current"></param>
            <param name="next"></param>
            <param name="route_weight"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement.Name">
            <summary>
            Return the name of this improvement.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.InterImprovements.RelocateImprovement.IsSymmetric">
            <summary>
            Returns true if this operation is symmetric.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator">
            <summary>
            A max time calculator.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.#ctor(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Creates a new max time calculator.
            </summary>
            <param name="problem"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.CalculateCumulWeights(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the cumulative weights of a route indexed by customer.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.CalculateOneRouteIncrease(System.Double,System.Double)">
            <summary>
            Calculates the new weight when adding one customer to one route.
            </summary>
            <param name="weight"></param>
            <param name="difference"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.CalculateOneRoute(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the weight of one route.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.Calculate(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the tot weight of one solution.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeCalculator.DeliveryTime">
            <summary>
            Returns the delivery time.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem">
            <summary>
            Represents a max time problem.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.#ctor(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Double,System.Double)">
            <summary>
            Creates a new max time problem.
            </summary>
            <param name="weights"></param>
            <param name="max"></param>
            <param name="delivery_time"></param>
            <param name="cost_per_second"></param>
            <param name="cost_per_vehicle"></param>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem._customer_positions">
            <summary>
            Holds all the customer positions.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Weight(System.Int32,System.Int32)">
            <summary>
            Returns the weight between two customers.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem._penalizations">
            <summary>
            Holds al penalizations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Penalize(OsmSharp.Math.VRP.Core.Routes.Edge,System.Double)">
            <summary>
            Penalizes an edge.
            </summary>
            <param name="edge"></param>
            <param name="delta"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.ResetPenalizations">
            <summary>
            Undoes all penalizations.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem._neighbours">
            <summary>
            Keeps the nearest neighbour list.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Get10NearestNeighbours(System.Int32)">
            <summary>
            Generate the nearest neighbour list.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Time(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the total time.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Time(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the time of one route.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Time(System.Double,System.Int32)">
            <summary>
            Calculates the time of one route given the travel time and the amount of customers.
            </summary>
            <param name="travel_time"></param>
            <param name="customers"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.TimeCumul(OsmSharp.Math.VRP.Core.Routes.IRoute)">
            <summary>
            Calculates the cumulative times of a route indexed by customer.
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Weight(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution)">
            <summary>
            Calculates the total weight.
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.WeightDifferenceAfterMerge(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Double)">
            <summary>
            Calculates the weight difference after merging two routes given the cost to merge them.
            </summary>
            <param name="solution"></param>
            <param name="merge_costs"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.CustomerPositions">
            <summary>
            Returns a list of customers.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.MaxTimeCalculator">
            <summary>
            Returns the max time calculator.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Customers">
            <summary>
            Returns a list of customers.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Max">
            <summary>
            The max time of one route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.DeliveryTime">
            <summary>
            The delivery time of one route.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Size">
            <summary>
            Returns the size.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Weights">
            <summary>
            Returns the weights.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Symmetric">
            <summary>
            Returns true if the problem is symmetric.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.Euclidean">
            <summary>
            Returns true if the problem is euclidean.
            </summary>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem.WeightMatrix">
            <summary>
            Returns the weight matrix.
            </summary>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeRouterWrapper">
            <summary>
            A wrapper for all the RouterMaxTime implementations.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeRouterWrapper.#ctor(OsmSharp.Routing.VRP.WithDepot.MaxTime.RouterMaxTime,OsmSharp.Routing.Router)">
            <summary>
            Creates a new RouterMaxTime wrapper.
            </summary>
            <param name="routerVRP"></param>
            <param name="router"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeRouterWrapper.CalculateNoDepot(OsmSharp.Routing.Vehicle,OsmSharp.Routing.RouterPoint[],System.Double[][])">
            <summary>
            Calculates the solution to the No-depot DVRP starting from the raw data.
            </summary>
            <param name="vehicle"></param>
            <param name="points"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution">
            <summary>
            Represents a solution to the MaxTime problem.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution.#ctor(System.Int32)">
            <summary>
            Creates a new solution in the form of a DynamicAsymmetricMultiRoute.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Creates a new solution based on an existing one.
            </summary>
            <param name="first"></param>
            <param name="next_array"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution.Clone">
            <summary>
            Creates a deep-copy of this solution.
            </summary>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution._weights">
            <summary>
            Keeps all the weights of the routes.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution.RemoveWeight(System.Int32)">
            <summary>
            Removes the weight for the given route.
            </summary>
            <param name="route_idx"></param>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution.Item(System.Int32)">
            <summary>
            Gets/sets the weight of the route at the given index.
            </summary>
            <param name="route_idx"></param>
            <returns></returns>
        </member>
        <member name="T:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS">
            <summary>
            Uses a Variable Neighbourhood Search technique.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS._router">
            <summary>
            Holds the router.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS._lambda">
            <summary>
            Holds the lambda value.
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS._thresholdPercentage">
            <summary>
            The threshold percentage.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS.#ctor(OsmSharp.Routing.Router,OsmSharp.Units.Time.Second,OsmSharp.Units.Time.Second,System.Single,System.Single)">
            <summary>
            Creates a new Guided Variable Neighbourhood Search solver.
            </summary>
            <param name="router"></param>
            <param name="max"></param>
            <param name="deliveryTime"></param>
            <param name="thresholdPrecentage"></param>
            <param name="lambda"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS.Solve(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem)">
            <summary>
            Executes a solver procedure.
            </summary>
            <param name="problem"></param>
            <returns></returns>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS._intraImprovements">
            <summary>
            Holds the intra-route improvements;
            </summary>
        </member>
        <member name="F:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS._interImprovements">
            <summary>
            Holds the inter-route improvements.
            </summary>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS.ImproveIntraRoute(OsmSharp.Math.VRP.Core.IProblemWeights,OsmSharp.Math.VRP.Core.Routes.IRoute,System.Double)">
            <summary>
            Apply some improvements within one route.
            </summary>
            <param name="problem"></param>
            <param name="route"></param>
            <param name="currentWeight"></param>
        </member>
        <member name="M:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS.ImproveInterRoute(OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeProblem,OsmSharp.Routing.VRP.WithDepot.MaxTime.MaxTimeSolution,System.Int32,System.Int32,System.Double)">
            <summary>
            Apply some improvements between the given routes and returns the resulting weight.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="route2Idx"></param>
            <param name="max"></param>
            <param name="route1Idx"></param>
            <returns></returns>
        </member>
        <member name="P:OsmSharp.Routing.VRP.WithDepot.MaxTime.VNS.GuidedVNS.Name">
            <summary>
            Returns the name of this solver.
            </summary>
        </member>
    </members>
</doc>
